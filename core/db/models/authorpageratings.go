// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Authorpagerating is an object representing the database table.
type Authorpagerating struct {
	AuthorRatingID string      `boil:"author_rating_id" json:"author_rating_id" toml:"author_rating_id" yaml:"author_rating_id"`
	AuthorID       null.String `boil:"author_id" json:"author_id,omitempty" toml:"author_id" yaml:"author_id,omitempty"`
	RatingType     null.Int    `boil:"rating_type" json:"rating_type,omitempty" toml:"rating_type" yaml:"rating_type,omitempty"`
	UserID         null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *authorpageratingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorpageratingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorpageratingColumns = struct {
	AuthorRatingID string
	AuthorID       string
	RatingType     string
	UserID         string
}{
	AuthorRatingID: "author_rating_id",
	AuthorID:       "author_id",
	RatingType:     "rating_type",
	UserID:         "user_id",
}

var AuthorpageratingTableColumns = struct {
	AuthorRatingID string
	AuthorID       string
	RatingType     string
	UserID         string
}{
	AuthorRatingID: "authorpageratings.author_rating_id",
	AuthorID:       "authorpageratings.author_id",
	RatingType:     "authorpageratings.rating_type",
	UserID:         "authorpageratings.user_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AuthorpageratingWhere = struct {
	AuthorRatingID whereHelperstring
	AuthorID       whereHelpernull_String
	RatingType     whereHelpernull_Int
	UserID         whereHelpernull_String
}{
	AuthorRatingID: whereHelperstring{field: "\"authorpageratings\".\"author_rating_id\""},
	AuthorID:       whereHelpernull_String{field: "\"authorpageratings\".\"author_id\""},
	RatingType:     whereHelpernull_Int{field: "\"authorpageratings\".\"rating_type\""},
	UserID:         whereHelpernull_String{field: "\"authorpageratings\".\"user_id\""},
}

// AuthorpageratingRels is where relationship names are stored.
var AuthorpageratingRels = struct {
	Author string
}{
	Author: "Author",
}

// authorpageratingR is where relationships are stored.
type authorpageratingR struct {
	Author *Author `boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
}

// NewStruct creates a new relationship struct
func (*authorpageratingR) NewStruct() *authorpageratingR {
	return &authorpageratingR{}
}

func (r *authorpageratingR) GetAuthor() *Author {
	if r == nil {
		return nil
	}
	return r.Author
}

// authorpageratingL is where Load methods for each relationship are stored.
type authorpageratingL struct{}

var (
	authorpageratingAllColumns            = []string{"author_rating_id", "author_id", "rating_type", "user_id"}
	authorpageratingColumnsWithoutDefault = []string{}
	authorpageratingColumnsWithDefault    = []string{"author_rating_id", "author_id", "rating_type", "user_id"}
	authorpageratingPrimaryKeyColumns     = []string{"author_rating_id"}
	authorpageratingGeneratedColumns      = []string{}
)

type (
	// AuthorpageratingSlice is an alias for a slice of pointers to Authorpagerating.
	// This should almost always be used instead of []Authorpagerating.
	AuthorpageratingSlice []*Authorpagerating
	// AuthorpageratingHook is the signature for custom Authorpagerating hook methods
	AuthorpageratingHook func(context.Context, boil.ContextExecutor, *Authorpagerating) error

	authorpageratingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorpageratingType                 = reflect.TypeOf(&Authorpagerating{})
	authorpageratingMapping              = queries.MakeStructMapping(authorpageratingType)
	authorpageratingPrimaryKeyMapping, _ = queries.BindMapping(authorpageratingType, authorpageratingMapping, authorpageratingPrimaryKeyColumns)
	authorpageratingInsertCacheMut       sync.RWMutex
	authorpageratingInsertCache          = make(map[string]insertCache)
	authorpageratingUpdateCacheMut       sync.RWMutex
	authorpageratingUpdateCache          = make(map[string]updateCache)
	authorpageratingUpsertCacheMut       sync.RWMutex
	authorpageratingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorpageratingAfterSelectHooks []AuthorpageratingHook

var authorpageratingBeforeInsertHooks []AuthorpageratingHook
var authorpageratingAfterInsertHooks []AuthorpageratingHook

var authorpageratingBeforeUpdateHooks []AuthorpageratingHook
var authorpageratingAfterUpdateHooks []AuthorpageratingHook

var authorpageratingBeforeDeleteHooks []AuthorpageratingHook
var authorpageratingAfterDeleteHooks []AuthorpageratingHook

var authorpageratingBeforeUpsertHooks []AuthorpageratingHook
var authorpageratingAfterUpsertHooks []AuthorpageratingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Authorpagerating) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Authorpagerating) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Authorpagerating) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Authorpagerating) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Authorpagerating) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Authorpagerating) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Authorpagerating) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Authorpagerating) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Authorpagerating) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorpageratingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorpageratingHook registers your hook function for all future operations.
func AddAuthorpageratingHook(hookPoint boil.HookPoint, authorpageratingHook AuthorpageratingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorpageratingAfterSelectHooks = append(authorpageratingAfterSelectHooks, authorpageratingHook)
	case boil.BeforeInsertHook:
		authorpageratingBeforeInsertHooks = append(authorpageratingBeforeInsertHooks, authorpageratingHook)
	case boil.AfterInsertHook:
		authorpageratingAfterInsertHooks = append(authorpageratingAfterInsertHooks, authorpageratingHook)
	case boil.BeforeUpdateHook:
		authorpageratingBeforeUpdateHooks = append(authorpageratingBeforeUpdateHooks, authorpageratingHook)
	case boil.AfterUpdateHook:
		authorpageratingAfterUpdateHooks = append(authorpageratingAfterUpdateHooks, authorpageratingHook)
	case boil.BeforeDeleteHook:
		authorpageratingBeforeDeleteHooks = append(authorpageratingBeforeDeleteHooks, authorpageratingHook)
	case boil.AfterDeleteHook:
		authorpageratingAfterDeleteHooks = append(authorpageratingAfterDeleteHooks, authorpageratingHook)
	case boil.BeforeUpsertHook:
		authorpageratingBeforeUpsertHooks = append(authorpageratingBeforeUpsertHooks, authorpageratingHook)
	case boil.AfterUpsertHook:
		authorpageratingAfterUpsertHooks = append(authorpageratingAfterUpsertHooks, authorpageratingHook)
	}
}

// OneG returns a single authorpagerating record from the query using the global executor.
func (q authorpageratingQuery) OneG(ctx context.Context) (*Authorpagerating, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorpagerating record from the query.
func (q authorpageratingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Authorpagerating, error) {
	o := &Authorpagerating{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for authorpageratings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Authorpagerating records from the query using the global executor.
func (q authorpageratingQuery) AllG(ctx context.Context) (AuthorpageratingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Authorpagerating records from the query.
func (q authorpageratingQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorpageratingSlice, error) {
	var o []*Authorpagerating

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Authorpagerating slice")
	}

	if len(authorpageratingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Authorpagerating records in the query using the global executor
func (q authorpageratingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Authorpagerating records in the query.
func (q authorpageratingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count authorpageratings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorpageratingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorpageratingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if authorpageratings exists")
	}

	return count > 0, nil
}

// Author pointed to by the foreign key.
func (o *Authorpagerating) Author(mods ...qm.QueryMod) authorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"author_id\" = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	return Authors(queryMods...)
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authorpageratingL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthorpagerating interface{}, mods queries.Applicator) error {
	var slice []*Authorpagerating
	var object *Authorpagerating

	if singular {
		var ok bool
		object, ok = maybeAuthorpagerating.(*Authorpagerating)
		if !ok {
			object = new(Authorpagerating)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthorpagerating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthorpagerating))
			}
		}
	} else {
		s, ok := maybeAuthorpagerating.(*[]*Authorpagerating)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthorpagerating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthorpagerating))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorpageratingR{}
		}
		if !queries.IsNil(object.AuthorID) {
			args = append(args, object.AuthorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorpageratingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AuthorID) {
				args = append(args, obj.AuthorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`author`),
		qm.WhereIn(`author.author_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Author")
	}

	var resultSlice []*Author
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Author")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &authorR{}
		}
		foreign.R.Authorpageratings = append(foreign.R.Authorpageratings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AuthorID, foreign.AuthorID) {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.Authorpageratings = append(foreign.R.Authorpageratings, local)
				break
			}
		}
	}

	return nil
}

// SetAuthorG of the authorpagerating to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Authorpageratings.
// Uses the global database handle.
func (o *Authorpagerating) SetAuthorG(ctx context.Context, insert bool, related *Author) error {
	return o.SetAuthor(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthor of the authorpagerating to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Authorpageratings.
func (o *Authorpagerating) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Author) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"authorpageratings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, authorpageratingPrimaryKeyColumns),
	)
	values := []interface{}{related.AuthorID, o.AuthorRatingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AuthorID, related.AuthorID)
	if o.R == nil {
		o.R = &authorpageratingR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &authorR{
			Authorpageratings: AuthorpageratingSlice{o},
		}
	} else {
		related.R.Authorpageratings = append(related.R.Authorpageratings, o)
	}

	return nil
}

// RemoveAuthorG relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Authorpagerating) RemoveAuthorG(ctx context.Context, related *Author) error {
	return o.RemoveAuthor(ctx, boil.GetContextDB(), related)
}

// RemoveAuthor relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Authorpagerating) RemoveAuthor(ctx context.Context, exec boil.ContextExecutor, related *Author) error {
	var err error

	queries.SetScanner(&o.AuthorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("author_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Author = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Authorpageratings {
		if queries.Equal(o.AuthorID, ri.AuthorID) {
			continue
		}

		ln := len(related.R.Authorpageratings)
		if ln > 1 && i < ln-1 {
			related.R.Authorpageratings[i] = related.R.Authorpageratings[ln-1]
		}
		related.R.Authorpageratings = related.R.Authorpageratings[:ln-1]
		break
	}
	return nil
}

// Authorpageratings retrieves all the records using an executor.
func Authorpageratings(mods ...qm.QueryMod) authorpageratingQuery {
	mods = append(mods, qm.From("\"authorpageratings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorpageratings\".*"})
	}

	return authorpageratingQuery{q}
}

// FindAuthorpageratingG retrieves a single record by ID.
func FindAuthorpageratingG(ctx context.Context, authorRatingID string, selectCols ...string) (*Authorpagerating, error) {
	return FindAuthorpagerating(ctx, boil.GetContextDB(), authorRatingID, selectCols...)
}

// FindAuthorpagerating retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorpagerating(ctx context.Context, exec boil.ContextExecutor, authorRatingID string, selectCols ...string) (*Authorpagerating, error) {
	authorpageratingObj := &Authorpagerating{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorpageratings\" where \"author_rating_id\"=$1", sel,
	)

	q := queries.Raw(query, authorRatingID)

	err := q.Bind(ctx, exec, authorpageratingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from authorpageratings")
	}

	if err = authorpageratingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorpageratingObj, err
	}

	return authorpageratingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Authorpagerating) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Authorpagerating) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no authorpageratings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorpageratingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorpageratingInsertCacheMut.RLock()
	cache, cached := authorpageratingInsertCache[key]
	authorpageratingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorpageratingAllColumns,
			authorpageratingColumnsWithDefault,
			authorpageratingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorpageratingType, authorpageratingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorpageratingType, authorpageratingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorpageratings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorpageratings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into authorpageratings")
	}

	if !cached {
		authorpageratingInsertCacheMut.Lock()
		authorpageratingInsertCache[key] = cache
		authorpageratingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Authorpagerating record using the global executor.
// See Update for more documentation.
func (o *Authorpagerating) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Authorpagerating.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Authorpagerating) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorpageratingUpdateCacheMut.RLock()
	cache, cached := authorpageratingUpdateCache[key]
	authorpageratingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorpageratingAllColumns,
			authorpageratingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update authorpageratings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorpageratings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorpageratingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorpageratingType, authorpageratingMapping, append(wl, authorpageratingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update authorpageratings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for authorpageratings")
	}

	if !cached {
		authorpageratingUpdateCacheMut.Lock()
		authorpageratingUpdateCache[key] = cache
		authorpageratingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorpageratingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorpageratingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for authorpageratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for authorpageratings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorpageratingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorpageratingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorpageratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorpageratings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorpageratingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in authorpagerating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all authorpagerating")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Authorpagerating) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Authorpagerating) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no authorpageratings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorpageratingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorpageratingUpsertCacheMut.RLock()
	cache, cached := authorpageratingUpsertCache[key]
	authorpageratingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorpageratingAllColumns,
			authorpageratingColumnsWithDefault,
			authorpageratingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorpageratingAllColumns,
			authorpageratingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert authorpageratings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorpageratingPrimaryKeyColumns))
			copy(conflict, authorpageratingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorpageratings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorpageratingType, authorpageratingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorpageratingType, authorpageratingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert authorpageratings")
	}

	if !cached {
		authorpageratingUpsertCacheMut.Lock()
		authorpageratingUpsertCache[key] = cache
		authorpageratingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Authorpagerating record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Authorpagerating) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Authorpagerating record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Authorpagerating) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Authorpagerating provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorpageratingPrimaryKeyMapping)
	sql := "DELETE FROM \"authorpageratings\" WHERE \"author_rating_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from authorpageratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for authorpageratings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorpageratingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorpageratingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no authorpageratingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from authorpageratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for authorpageratings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorpageratingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorpageratingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorpageratingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorpageratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorpageratings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorpageratingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from authorpagerating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for authorpageratings")
	}

	if len(authorpageratingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Authorpagerating) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Authorpagerating provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Authorpagerating) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorpagerating(ctx, exec, o.AuthorRatingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorpageratingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty AuthorpageratingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorpageratingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorpageratingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorpageratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorpageratings\".* FROM \"authorpageratings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorpageratingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in AuthorpageratingSlice")
	}

	*o = slice

	return nil
}

// AuthorpageratingExistsG checks if the Authorpagerating row exists.
func AuthorpageratingExistsG(ctx context.Context, authorRatingID string) (bool, error) {
	return AuthorpageratingExists(ctx, boil.GetContextDB(), authorRatingID)
}

// AuthorpageratingExists checks if the Authorpagerating row exists.
func AuthorpageratingExists(ctx context.Context, exec boil.ContextExecutor, authorRatingID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorpageratings\" where \"author_rating_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, authorRatingID)
	}
	row := exec.QueryRowContext(ctx, sql, authorRatingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if authorpageratings exists")
	}

	return exists, nil
}

// Exists checks if the Authorpagerating row exists.
func (o *Authorpagerating) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorpageratingExists(ctx, exec, o.AuthorRatingID)
}
