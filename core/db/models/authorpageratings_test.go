// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthorpageratings(t *testing.T) {
	t.Parallel()

	query := Authorpageratings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthorpageratingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorpageratingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Authorpageratings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorpageratingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorpageratingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorpageratingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthorpageratingExists(ctx, tx, o.AuthorRatingID)
	if err != nil {
		t.Errorf("Unable to check if Authorpagerating exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthorpageratingExists to return true, but got false.")
	}
}

func testAuthorpageratingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authorpageratingFound, err := FindAuthorpagerating(ctx, tx, o.AuthorRatingID)
	if err != nil {
		t.Error(err)
	}

	if authorpageratingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthorpageratingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Authorpageratings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthorpageratingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Authorpageratings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthorpageratingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authorpageratingOne := &Authorpagerating{}
	authorpageratingTwo := &Authorpagerating{}
	if err = randomize.Struct(seed, authorpageratingOne, authorpageratingDBTypes, false, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}
	if err = randomize.Struct(seed, authorpageratingTwo, authorpageratingDBTypes, false, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authorpageratingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorpageratingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Authorpageratings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthorpageratingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorpageratingOne := &Authorpagerating{}
	authorpageratingTwo := &Authorpagerating{}
	if err = randomize.Struct(seed, authorpageratingOne, authorpageratingDBTypes, false, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}
	if err = randomize.Struct(seed, authorpageratingTwo, authorpageratingDBTypes, false, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authorpageratingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorpageratingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authorpageratingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func authorpageratingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorpagerating) error {
	*o = Authorpagerating{}
	return nil
}

func testAuthorpageratingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Authorpagerating{}
	o := &Authorpagerating{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Authorpagerating object: %s", err)
	}

	AddAuthorpageratingHook(boil.BeforeInsertHook, authorpageratingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authorpageratingBeforeInsertHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.AfterInsertHook, authorpageratingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authorpageratingAfterInsertHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.AfterSelectHook, authorpageratingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authorpageratingAfterSelectHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.BeforeUpdateHook, authorpageratingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authorpageratingBeforeUpdateHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.AfterUpdateHook, authorpageratingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authorpageratingAfterUpdateHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.BeforeDeleteHook, authorpageratingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authorpageratingBeforeDeleteHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.AfterDeleteHook, authorpageratingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authorpageratingAfterDeleteHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.BeforeUpsertHook, authorpageratingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authorpageratingBeforeUpsertHooks = []AuthorpageratingHook{}

	AddAuthorpageratingHook(boil.AfterUpsertHook, authorpageratingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authorpageratingAfterUpsertHooks = []AuthorpageratingHook{}
}

func testAuthorpageratingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorpageratingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authorpageratingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorpageratingToOneAuthorUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Authorpagerating
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorID, foreign.AuthorID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.AuthorID, foreign.AuthorID) {
		t.Errorf("want: %v, got %v", foreign.AuthorID, check.AuthorID)
	}

	ranAfterSelectHook := false
	AddAuthorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Author) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AuthorpageratingSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*Authorpagerating)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAuthorpageratingToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorpagerating
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorpageratingDBTypes, false, strmangle.SetComplement(authorpageratingPrimaryKeyColumns, authorpageratingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Authorpageratings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorID, x.AuthorID) {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorID, x.AuthorID) {
			t.Error("foreign key was wrong value", a.AuthorID, x.AuthorID)
		}
	}
}

func testAuthorpageratingToOneRemoveOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorpagerating
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorpageratingDBTypes, false, strmangle.SetComplement(authorpageratingPrimaryKeyColumns, authorpageratingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Authorpageratings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAuthorpageratingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthorpageratingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorpageratingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthorpageratingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Authorpageratings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authorpageratingDBTypes = map[string]string{`AuthorRatingID`: `uuid`, `AuthorID`: `uuid`, `RatingType`: `integer`, `UserID`: `uuid`}
	_                       = bytes.MinRead
)

func testAuthorpageratingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authorpageratingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authorpageratingAllColumns) == len(authorpageratingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthorpageratingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authorpageratingAllColumns) == len(authorpageratingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Authorpagerating{}
	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorpageratingDBTypes, true, authorpageratingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authorpageratingAllColumns, authorpageratingPrimaryKeyColumns) {
		fields = authorpageratingAllColumns
	} else {
		fields = strmangle.SetComplement(
			authorpageratingAllColumns,
			authorpageratingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthorpageratingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthorpageratingsUpsert(t *testing.T) {
	t.Parallel()

	if len(authorpageratingAllColumns) == len(authorpageratingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Authorpagerating{}
	if err = randomize.Struct(seed, &o, authorpageratingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Authorpagerating: %s", err)
	}

	count, err := Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authorpageratingDBTypes, false, authorpageratingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Authorpagerating struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Authorpagerating: %s", err)
	}

	count, err = Authorpageratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
