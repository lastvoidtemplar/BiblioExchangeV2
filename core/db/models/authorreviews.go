// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Authorreview is an object representing the database table.
type Authorreview struct {
	AuthorReviewsID string      `boil:"author_reviews_id" json:"author_reviews_id" toml:"author_reviews_id" yaml:"author_reviews_id"`
	RootID          null.String `boil:"root_id" json:"root_id,omitempty" toml:"root_id" yaml:"root_id,omitempty"`
	AuthorID        null.String `boil:"author_id" json:"author_id,omitempty" toml:"author_id" yaml:"author_id,omitempty"`
	UserID          string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Content         null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`

	R *authorreviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorreviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorreviewColumns = struct {
	AuthorReviewsID string
	RootID          string
	AuthorID        string
	UserID          string
	Content         string
}{
	AuthorReviewsID: "author_reviews_id",
	RootID:          "root_id",
	AuthorID:        "author_id",
	UserID:          "user_id",
	Content:         "content",
}

var AuthorreviewTableColumns = struct {
	AuthorReviewsID string
	RootID          string
	AuthorID        string
	UserID          string
	Content         string
}{
	AuthorReviewsID: "authorreviews.author_reviews_id",
	RootID:          "authorreviews.root_id",
	AuthorID:        "authorreviews.author_id",
	UserID:          "authorreviews.user_id",
	Content:         "authorreviews.content",
}

// Generated where

var AuthorreviewWhere = struct {
	AuthorReviewsID whereHelperstring
	RootID          whereHelpernull_String
	AuthorID        whereHelpernull_String
	UserID          whereHelperstring
	Content         whereHelpernull_String
}{
	AuthorReviewsID: whereHelperstring{field: "\"authorreviews\".\"author_reviews_id\""},
	RootID:          whereHelpernull_String{field: "\"authorreviews\".\"root_id\""},
	AuthorID:        whereHelpernull_String{field: "\"authorreviews\".\"author_id\""},
	UserID:          whereHelperstring{field: "\"authorreviews\".\"user_id\""},
	Content:         whereHelpernull_String{field: "\"authorreviews\".\"content\""},
}

// AuthorreviewRels is where relationship names are stored.
var AuthorreviewRels = struct {
	Author            string
	Root              string
	RootAuthorreviews string
}{
	Author:            "Author",
	Root:              "Root",
	RootAuthorreviews: "RootAuthorreviews",
}

// authorreviewR is where relationships are stored.
type authorreviewR struct {
	Author            *Author           `boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
	Root              *Authorreview     `boil:"Root" json:"Root" toml:"Root" yaml:"Root"`
	RootAuthorreviews AuthorreviewSlice `boil:"RootAuthorreviews" json:"RootAuthorreviews" toml:"RootAuthorreviews" yaml:"RootAuthorreviews"`
}

// NewStruct creates a new relationship struct
func (*authorreviewR) NewStruct() *authorreviewR {
	return &authorreviewR{}
}

func (r *authorreviewR) GetAuthor() *Author {
	if r == nil {
		return nil
	}
	return r.Author
}

func (r *authorreviewR) GetRoot() *Authorreview {
	if r == nil {
		return nil
	}
	return r.Root
}

func (r *authorreviewR) GetRootAuthorreviews() AuthorreviewSlice {
	if r == nil {
		return nil
	}
	return r.RootAuthorreviews
}

// authorreviewL is where Load methods for each relationship are stored.
type authorreviewL struct{}

var (
	authorreviewAllColumns            = []string{"author_reviews_id", "root_id", "author_id", "user_id", "content"}
	authorreviewColumnsWithoutDefault = []string{"user_id"}
	authorreviewColumnsWithDefault    = []string{"author_reviews_id", "root_id", "author_id", "content"}
	authorreviewPrimaryKeyColumns     = []string{"author_reviews_id"}
	authorreviewGeneratedColumns      = []string{}
)

type (
	// AuthorreviewSlice is an alias for a slice of pointers to Authorreview.
	// This should almost always be used instead of []Authorreview.
	AuthorreviewSlice []*Authorreview
	// AuthorreviewHook is the signature for custom Authorreview hook methods
	AuthorreviewHook func(context.Context, boil.ContextExecutor, *Authorreview) error

	authorreviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorreviewType                 = reflect.TypeOf(&Authorreview{})
	authorreviewMapping              = queries.MakeStructMapping(authorreviewType)
	authorreviewPrimaryKeyMapping, _ = queries.BindMapping(authorreviewType, authorreviewMapping, authorreviewPrimaryKeyColumns)
	authorreviewInsertCacheMut       sync.RWMutex
	authorreviewInsertCache          = make(map[string]insertCache)
	authorreviewUpdateCacheMut       sync.RWMutex
	authorreviewUpdateCache          = make(map[string]updateCache)
	authorreviewUpsertCacheMut       sync.RWMutex
	authorreviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorreviewAfterSelectHooks []AuthorreviewHook

var authorreviewBeforeInsertHooks []AuthorreviewHook
var authorreviewAfterInsertHooks []AuthorreviewHook

var authorreviewBeforeUpdateHooks []AuthorreviewHook
var authorreviewAfterUpdateHooks []AuthorreviewHook

var authorreviewBeforeDeleteHooks []AuthorreviewHook
var authorreviewAfterDeleteHooks []AuthorreviewHook

var authorreviewBeforeUpsertHooks []AuthorreviewHook
var authorreviewAfterUpsertHooks []AuthorreviewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Authorreview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Authorreview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Authorreview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Authorreview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Authorreview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Authorreview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Authorreview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Authorreview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Authorreview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorreviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorreviewHook registers your hook function for all future operations.
func AddAuthorreviewHook(hookPoint boil.HookPoint, authorreviewHook AuthorreviewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorreviewAfterSelectHooks = append(authorreviewAfterSelectHooks, authorreviewHook)
	case boil.BeforeInsertHook:
		authorreviewBeforeInsertHooks = append(authorreviewBeforeInsertHooks, authorreviewHook)
	case boil.AfterInsertHook:
		authorreviewAfterInsertHooks = append(authorreviewAfterInsertHooks, authorreviewHook)
	case boil.BeforeUpdateHook:
		authorreviewBeforeUpdateHooks = append(authorreviewBeforeUpdateHooks, authorreviewHook)
	case boil.AfterUpdateHook:
		authorreviewAfterUpdateHooks = append(authorreviewAfterUpdateHooks, authorreviewHook)
	case boil.BeforeDeleteHook:
		authorreviewBeforeDeleteHooks = append(authorreviewBeforeDeleteHooks, authorreviewHook)
	case boil.AfterDeleteHook:
		authorreviewAfterDeleteHooks = append(authorreviewAfterDeleteHooks, authorreviewHook)
	case boil.BeforeUpsertHook:
		authorreviewBeforeUpsertHooks = append(authorreviewBeforeUpsertHooks, authorreviewHook)
	case boil.AfterUpsertHook:
		authorreviewAfterUpsertHooks = append(authorreviewAfterUpsertHooks, authorreviewHook)
	}
}

// OneG returns a single authorreview record from the query using the global executor.
func (q authorreviewQuery) OneG(ctx context.Context) (*Authorreview, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorreview record from the query.
func (q authorreviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Authorreview, error) {
	o := &Authorreview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for authorreviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Authorreview records from the query using the global executor.
func (q authorreviewQuery) AllG(ctx context.Context) (AuthorreviewSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Authorreview records from the query.
func (q authorreviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorreviewSlice, error) {
	var o []*Authorreview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Authorreview slice")
	}

	if len(authorreviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Authorreview records in the query using the global executor
func (q authorreviewQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Authorreview records in the query.
func (q authorreviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count authorreviews rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorreviewQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorreviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if authorreviews exists")
	}

	return count > 0, nil
}

// Author pointed to by the foreign key.
func (o *Authorreview) Author(mods ...qm.QueryMod) authorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"author_id\" = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	return Authors(queryMods...)
}

// Root pointed to by the foreign key.
func (o *Authorreview) Root(mods ...qm.QueryMod) authorreviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"author_reviews_id\" = ?", o.RootID),
	}

	queryMods = append(queryMods, mods...)

	return Authorreviews(queryMods...)
}

// RootAuthorreviews retrieves all the authorreview's Authorreviews with an executor via root_id column.
func (o *Authorreview) RootAuthorreviews(mods ...qm.QueryMod) authorreviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"authorreviews\".\"root_id\"=?", o.AuthorReviewsID),
	)

	return Authorreviews(queryMods...)
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authorreviewL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthorreview interface{}, mods queries.Applicator) error {
	var slice []*Authorreview
	var object *Authorreview

	if singular {
		var ok bool
		object, ok = maybeAuthorreview.(*Authorreview)
		if !ok {
			object = new(Authorreview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthorreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthorreview))
			}
		}
	} else {
		s, ok := maybeAuthorreview.(*[]*Authorreview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthorreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthorreview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorreviewR{}
		}
		if !queries.IsNil(object.AuthorID) {
			args = append(args, object.AuthorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorreviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AuthorID) {
				args = append(args, obj.AuthorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`author`),
		qm.WhereIn(`author.author_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Author")
	}

	var resultSlice []*Author
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Author")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &authorR{}
		}
		foreign.R.Authorreviews = append(foreign.R.Authorreviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AuthorID, foreign.AuthorID) {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.Authorreviews = append(foreign.R.Authorreviews, local)
				break
			}
		}
	}

	return nil
}

// LoadRoot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authorreviewL) LoadRoot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthorreview interface{}, mods queries.Applicator) error {
	var slice []*Authorreview
	var object *Authorreview

	if singular {
		var ok bool
		object, ok = maybeAuthorreview.(*Authorreview)
		if !ok {
			object = new(Authorreview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthorreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthorreview))
			}
		}
	} else {
		s, ok := maybeAuthorreview.(*[]*Authorreview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthorreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthorreview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorreviewR{}
		}
		if !queries.IsNil(object.RootID) {
			args = append(args, object.RootID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorreviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RootID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RootID) {
				args = append(args, obj.RootID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`authorreviews`),
		qm.WhereIn(`authorreviews.author_reviews_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Authorreview")
	}

	var resultSlice []*Authorreview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Authorreview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for authorreviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authorreviews")
	}

	if len(authorreviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Root = foreign
		if foreign.R == nil {
			foreign.R = &authorreviewR{}
		}
		foreign.R.RootAuthorreviews = append(foreign.R.RootAuthorreviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RootID, foreign.AuthorReviewsID) {
				local.R.Root = foreign
				if foreign.R == nil {
					foreign.R = &authorreviewR{}
				}
				foreign.R.RootAuthorreviews = append(foreign.R.RootAuthorreviews, local)
				break
			}
		}
	}

	return nil
}

// LoadRootAuthorreviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authorreviewL) LoadRootAuthorreviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthorreview interface{}, mods queries.Applicator) error {
	var slice []*Authorreview
	var object *Authorreview

	if singular {
		var ok bool
		object, ok = maybeAuthorreview.(*Authorreview)
		if !ok {
			object = new(Authorreview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthorreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthorreview))
			}
		}
	} else {
		s, ok := maybeAuthorreview.(*[]*Authorreview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthorreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthorreview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorreviewR{}
		}
		args = append(args, object.AuthorReviewsID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorreviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthorReviewsID) {
					continue Outer
				}
			}

			args = append(args, obj.AuthorReviewsID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`authorreviews`),
		qm.WhereIn(`authorreviews.root_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load authorreviews")
	}

	var resultSlice []*Authorreview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice authorreviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on authorreviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authorreviews")
	}

	if len(authorreviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RootAuthorreviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorreviewR{}
			}
			foreign.R.Root = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AuthorReviewsID, foreign.RootID) {
				local.R.RootAuthorreviews = append(local.R.RootAuthorreviews, foreign)
				if foreign.R == nil {
					foreign.R = &authorreviewR{}
				}
				foreign.R.Root = local
				break
			}
		}
	}

	return nil
}

// SetAuthorG of the authorreview to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Authorreviews.
// Uses the global database handle.
func (o *Authorreview) SetAuthorG(ctx context.Context, insert bool, related *Author) error {
	return o.SetAuthor(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthor of the authorreview to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Authorreviews.
func (o *Authorreview) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Author) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"authorreviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, authorreviewPrimaryKeyColumns),
	)
	values := []interface{}{related.AuthorID, o.AuthorReviewsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AuthorID, related.AuthorID)
	if o.R == nil {
		o.R = &authorreviewR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &authorR{
			Authorreviews: AuthorreviewSlice{o},
		}
	} else {
		related.R.Authorreviews = append(related.R.Authorreviews, o)
	}

	return nil
}

// RemoveAuthorG relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Authorreview) RemoveAuthorG(ctx context.Context, related *Author) error {
	return o.RemoveAuthor(ctx, boil.GetContextDB(), related)
}

// RemoveAuthor relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Authorreview) RemoveAuthor(ctx context.Context, exec boil.ContextExecutor, related *Author) error {
	var err error

	queries.SetScanner(&o.AuthorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("author_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Author = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Authorreviews {
		if queries.Equal(o.AuthorID, ri.AuthorID) {
			continue
		}

		ln := len(related.R.Authorreviews)
		if ln > 1 && i < ln-1 {
			related.R.Authorreviews[i] = related.R.Authorreviews[ln-1]
		}
		related.R.Authorreviews = related.R.Authorreviews[:ln-1]
		break
	}
	return nil
}

// SetRootG of the authorreview to the related item.
// Sets o.R.Root to related.
// Adds o to related.R.RootAuthorreviews.
// Uses the global database handle.
func (o *Authorreview) SetRootG(ctx context.Context, insert bool, related *Authorreview) error {
	return o.SetRoot(ctx, boil.GetContextDB(), insert, related)
}

// SetRoot of the authorreview to the related item.
// Sets o.R.Root to related.
// Adds o to related.R.RootAuthorreviews.
func (o *Authorreview) SetRoot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Authorreview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"authorreviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"root_id"}),
		strmangle.WhereClause("\"", "\"", 2, authorreviewPrimaryKeyColumns),
	)
	values := []interface{}{related.AuthorReviewsID, o.AuthorReviewsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RootID, related.AuthorReviewsID)
	if o.R == nil {
		o.R = &authorreviewR{
			Root: related,
		}
	} else {
		o.R.Root = related
	}

	if related.R == nil {
		related.R = &authorreviewR{
			RootAuthorreviews: AuthorreviewSlice{o},
		}
	} else {
		related.R.RootAuthorreviews = append(related.R.RootAuthorreviews, o)
	}

	return nil
}

// RemoveRootG relationship.
// Sets o.R.Root to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Authorreview) RemoveRootG(ctx context.Context, related *Authorreview) error {
	return o.RemoveRoot(ctx, boil.GetContextDB(), related)
}

// RemoveRoot relationship.
// Sets o.R.Root to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Authorreview) RemoveRoot(ctx context.Context, exec boil.ContextExecutor, related *Authorreview) error {
	var err error

	queries.SetScanner(&o.RootID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("root_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Root = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RootAuthorreviews {
		if queries.Equal(o.RootID, ri.RootID) {
			continue
		}

		ln := len(related.R.RootAuthorreviews)
		if ln > 1 && i < ln-1 {
			related.R.RootAuthorreviews[i] = related.R.RootAuthorreviews[ln-1]
		}
		related.R.RootAuthorreviews = related.R.RootAuthorreviews[:ln-1]
		break
	}
	return nil
}

// AddRootAuthorreviewsG adds the given related objects to the existing relationships
// of the authorreview, optionally inserting them as new records.
// Appends related to o.R.RootAuthorreviews.
// Sets related.R.Root appropriately.
// Uses the global database handle.
func (o *Authorreview) AddRootAuthorreviewsG(ctx context.Context, insert bool, related ...*Authorreview) error {
	return o.AddRootAuthorreviews(ctx, boil.GetContextDB(), insert, related...)
}

// AddRootAuthorreviews adds the given related objects to the existing relationships
// of the authorreview, optionally inserting them as new records.
// Appends related to o.R.RootAuthorreviews.
// Sets related.R.Root appropriately.
func (o *Authorreview) AddRootAuthorreviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Authorreview) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RootID, o.AuthorReviewsID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"authorreviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"root_id"}),
				strmangle.WhereClause("\"", "\"", 2, authorreviewPrimaryKeyColumns),
			)
			values := []interface{}{o.AuthorReviewsID, rel.AuthorReviewsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RootID, o.AuthorReviewsID)
		}
	}

	if o.R == nil {
		o.R = &authorreviewR{
			RootAuthorreviews: related,
		}
	} else {
		o.R.RootAuthorreviews = append(o.R.RootAuthorreviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorreviewR{
				Root: o,
			}
		} else {
			rel.R.Root = o
		}
	}
	return nil
}

// SetRootAuthorreviewsG removes all previously related items of the
// authorreview replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Root's RootAuthorreviews accordingly.
// Replaces o.R.RootAuthorreviews with related.
// Sets related.R.Root's RootAuthorreviews accordingly.
// Uses the global database handle.
func (o *Authorreview) SetRootAuthorreviewsG(ctx context.Context, insert bool, related ...*Authorreview) error {
	return o.SetRootAuthorreviews(ctx, boil.GetContextDB(), insert, related...)
}

// SetRootAuthorreviews removes all previously related items of the
// authorreview replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Root's RootAuthorreviews accordingly.
// Replaces o.R.RootAuthorreviews with related.
// Sets related.R.Root's RootAuthorreviews accordingly.
func (o *Authorreview) SetRootAuthorreviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Authorreview) error {
	query := "update \"authorreviews\" set \"root_id\" = null where \"root_id\" = $1"
	values := []interface{}{o.AuthorReviewsID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RootAuthorreviews {
			queries.SetScanner(&rel.RootID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Root = nil
		}
		o.R.RootAuthorreviews = nil
	}

	return o.AddRootAuthorreviews(ctx, exec, insert, related...)
}

// RemoveRootAuthorreviewsG relationships from objects passed in.
// Removes related items from R.RootAuthorreviews (uses pointer comparison, removal does not keep order)
// Sets related.R.Root.
// Uses the global database handle.
func (o *Authorreview) RemoveRootAuthorreviewsG(ctx context.Context, related ...*Authorreview) error {
	return o.RemoveRootAuthorreviews(ctx, boil.GetContextDB(), related...)
}

// RemoveRootAuthorreviews relationships from objects passed in.
// Removes related items from R.RootAuthorreviews (uses pointer comparison, removal does not keep order)
// Sets related.R.Root.
func (o *Authorreview) RemoveRootAuthorreviews(ctx context.Context, exec boil.ContextExecutor, related ...*Authorreview) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RootID, nil)
		if rel.R != nil {
			rel.R.Root = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("root_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RootAuthorreviews {
			if rel != ri {
				continue
			}

			ln := len(o.R.RootAuthorreviews)
			if ln > 1 && i < ln-1 {
				o.R.RootAuthorreviews[i] = o.R.RootAuthorreviews[ln-1]
			}
			o.R.RootAuthorreviews = o.R.RootAuthorreviews[:ln-1]
			break
		}
	}

	return nil
}

// Authorreviews retrieves all the records using an executor.
func Authorreviews(mods ...qm.QueryMod) authorreviewQuery {
	mods = append(mods, qm.From("\"authorreviews\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorreviews\".*"})
	}

	return authorreviewQuery{q}
}

// FindAuthorreviewG retrieves a single record by ID.
func FindAuthorreviewG(ctx context.Context, authorReviewsID string, selectCols ...string) (*Authorreview, error) {
	return FindAuthorreview(ctx, boil.GetContextDB(), authorReviewsID, selectCols...)
}

// FindAuthorreview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorreview(ctx context.Context, exec boil.ContextExecutor, authorReviewsID string, selectCols ...string) (*Authorreview, error) {
	authorreviewObj := &Authorreview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorreviews\" where \"author_reviews_id\"=$1", sel,
	)

	q := queries.Raw(query, authorReviewsID)

	err := q.Bind(ctx, exec, authorreviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from authorreviews")
	}

	if err = authorreviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorreviewObj, err
	}

	return authorreviewObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Authorreview) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Authorreview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no authorreviews provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorreviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorreviewInsertCacheMut.RLock()
	cache, cached := authorreviewInsertCache[key]
	authorreviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorreviewAllColumns,
			authorreviewColumnsWithDefault,
			authorreviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorreviewType, authorreviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorreviewType, authorreviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorreviews\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorreviews\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into authorreviews")
	}

	if !cached {
		authorreviewInsertCacheMut.Lock()
		authorreviewInsertCache[key] = cache
		authorreviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Authorreview record using the global executor.
// See Update for more documentation.
func (o *Authorreview) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Authorreview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Authorreview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorreviewUpdateCacheMut.RLock()
	cache, cached := authorreviewUpdateCache[key]
	authorreviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorreviewAllColumns,
			authorreviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update authorreviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorreviews\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorreviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorreviewType, authorreviewMapping, append(wl, authorreviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update authorreviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for authorreviews")
	}

	if !cached {
		authorreviewUpdateCacheMut.Lock()
		authorreviewUpdateCache[key] = cache
		authorreviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorreviewQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorreviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for authorreviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for authorreviews")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorreviewSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorreviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorreviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorreviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorreviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in authorreview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all authorreview")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Authorreview) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Authorreview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no authorreviews provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorreviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorreviewUpsertCacheMut.RLock()
	cache, cached := authorreviewUpsertCache[key]
	authorreviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorreviewAllColumns,
			authorreviewColumnsWithDefault,
			authorreviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorreviewAllColumns,
			authorreviewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert authorreviews, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorreviewPrimaryKeyColumns))
			copy(conflict, authorreviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorreviews\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorreviewType, authorreviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorreviewType, authorreviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert authorreviews")
	}

	if !cached {
		authorreviewUpsertCacheMut.Lock()
		authorreviewUpsertCache[key] = cache
		authorreviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Authorreview record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Authorreview) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Authorreview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Authorreview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Authorreview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorreviewPrimaryKeyMapping)
	sql := "DELETE FROM \"authorreviews\" WHERE \"author_reviews_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from authorreviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for authorreviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorreviewQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorreviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no authorreviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from authorreviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for authorreviews")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorreviewSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorreviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorreviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorreviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorreviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorreviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from authorreview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for authorreviews")
	}

	if len(authorreviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Authorreview) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Authorreview provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Authorreview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorreview(ctx, exec, o.AuthorReviewsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorreviewSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty AuthorreviewSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorreviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorreviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorreviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorreviews\".* FROM \"authorreviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorreviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in AuthorreviewSlice")
	}

	*o = slice

	return nil
}

// AuthorreviewExistsG checks if the Authorreview row exists.
func AuthorreviewExistsG(ctx context.Context, authorReviewsID string) (bool, error) {
	return AuthorreviewExists(ctx, boil.GetContextDB(), authorReviewsID)
}

// AuthorreviewExists checks if the Authorreview row exists.
func AuthorreviewExists(ctx context.Context, exec boil.ContextExecutor, authorReviewsID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorreviews\" where \"author_reviews_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, authorReviewsID)
	}
	row := exec.QueryRowContext(ctx, sql, authorReviewsID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if authorreviews exists")
	}

	return exists, nil
}

// Exists checks if the Authorreview row exists.
func (o *Authorreview) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorreviewExists(ctx, exec, o.AuthorReviewsID)
}
