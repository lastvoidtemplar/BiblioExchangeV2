// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthorreviews(t *testing.T) {
	t.Parallel()

	query := Authorreviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthorreviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorreviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Authorreviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorreviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorreviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorreviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthorreviewExists(ctx, tx, o.AuthorReviewsID)
	if err != nil {
		t.Errorf("Unable to check if Authorreview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthorreviewExists to return true, but got false.")
	}
}

func testAuthorreviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authorreviewFound, err := FindAuthorreview(ctx, tx, o.AuthorReviewsID)
	if err != nil {
		t.Error(err)
	}

	if authorreviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthorreviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Authorreviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthorreviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Authorreviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthorreviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authorreviewOne := &Authorreview{}
	authorreviewTwo := &Authorreview{}
	if err = randomize.Struct(seed, authorreviewOne, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}
	if err = randomize.Struct(seed, authorreviewTwo, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authorreviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorreviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Authorreviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthorreviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorreviewOne := &Authorreview{}
	authorreviewTwo := &Authorreview{}
	if err = randomize.Struct(seed, authorreviewOne, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}
	if err = randomize.Struct(seed, authorreviewTwo, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authorreviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorreviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authorreviewBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func authorreviewAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
	*o = Authorreview{}
	return nil
}

func testAuthorreviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Authorreview{}
	o := &Authorreview{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authorreviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Authorreview object: %s", err)
	}

	AddAuthorreviewHook(boil.BeforeInsertHook, authorreviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authorreviewBeforeInsertHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.AfterInsertHook, authorreviewAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authorreviewAfterInsertHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.AfterSelectHook, authorreviewAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authorreviewAfterSelectHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.BeforeUpdateHook, authorreviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authorreviewBeforeUpdateHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.AfterUpdateHook, authorreviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authorreviewAfterUpdateHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.BeforeDeleteHook, authorreviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authorreviewBeforeDeleteHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.AfterDeleteHook, authorreviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authorreviewAfterDeleteHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.BeforeUpsertHook, authorreviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authorreviewBeforeUpsertHooks = []AuthorreviewHook{}

	AddAuthorreviewHook(boil.AfterUpsertHook, authorreviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authorreviewAfterUpsertHooks = []AuthorreviewHook{}
}

func testAuthorreviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorreviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authorreviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorreviewToManyRootAuthorreviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b, c Authorreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RootID, a.AuthorReviewsID)
	queries.Assign(&c.RootID, a.AuthorReviewsID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RootAuthorreviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RootID, b.RootID) {
			bFound = true
		}
		if queries.Equal(v.RootID, c.RootID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AuthorreviewSlice{&a}
	if err = a.L.LoadRootAuthorreviews(ctx, tx, false, (*[]*Authorreview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RootAuthorreviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RootAuthorreviews = nil
	if err = a.L.LoadRootAuthorreviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RootAuthorreviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAuthorreviewToManyAddOpRootAuthorreviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b, c, d, e Authorreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Authorreview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Authorreview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRootAuthorreviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.AuthorReviewsID, first.RootID) {
			t.Error("foreign key was wrong value", a.AuthorReviewsID, first.RootID)
		}
		if !queries.Equal(a.AuthorReviewsID, second.RootID) {
			t.Error("foreign key was wrong value", a.AuthorReviewsID, second.RootID)
		}

		if first.R.Root != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Root != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RootAuthorreviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RootAuthorreviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RootAuthorreviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAuthorreviewToManySetOpRootAuthorreviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b, c, d, e Authorreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Authorreview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRootAuthorreviews(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RootAuthorreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRootAuthorreviews(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RootAuthorreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RootID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RootID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.AuthorReviewsID, d.RootID) {
		t.Error("foreign key was wrong value", a.AuthorReviewsID, d.RootID)
	}
	if !queries.Equal(a.AuthorReviewsID, e.RootID) {
		t.Error("foreign key was wrong value", a.AuthorReviewsID, e.RootID)
	}

	if b.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Root != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Root != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RootAuthorreviews[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RootAuthorreviews[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAuthorreviewToManyRemoveOpRootAuthorreviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b, c, d, e Authorreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Authorreview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRootAuthorreviews(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RootAuthorreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRootAuthorreviews(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RootAuthorreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RootID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RootID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Root != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Root != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RootAuthorreviews) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RootAuthorreviews[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RootAuthorreviews[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAuthorreviewToOneAuthorUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Authorreview
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorID, foreign.AuthorID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.AuthorID, foreign.AuthorID) {
		t.Errorf("want: %v, got %v", foreign.AuthorID, check.AuthorID)
	}

	ranAfterSelectHook := false
	AddAuthorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Author) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AuthorreviewSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*Authorreview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAuthorreviewToOneAuthorreviewUsingRoot(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Authorreview
	var foreign Authorreview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorreviewDBTypes, false, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RootID, foreign.AuthorReviewsID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Root().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.AuthorReviewsID, foreign.AuthorReviewsID) {
		t.Errorf("want: %v, got %v", foreign.AuthorReviewsID, check.AuthorReviewsID)
	}

	ranAfterSelectHook := false
	AddAuthorreviewHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Authorreview) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AuthorreviewSlice{&local}
	if err = local.L.LoadRoot(ctx, tx, false, (*[]*Authorreview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Root == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Root = nil
	if err = local.L.LoadRoot(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Root == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAuthorreviewToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Authorreviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorID, x.AuthorID) {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorID, x.AuthorID) {
			t.Error("foreign key was wrong value", a.AuthorID, x.AuthorID)
		}
	}
}

func testAuthorreviewToOneRemoveOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Authorreviews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAuthorreviewToOneSetOpAuthorreviewUsingRoot(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b, c Authorreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Authorreview{&b, &c} {
		err = a.SetRoot(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Root != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RootAuthorreviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RootID, x.AuthorReviewsID) {
			t.Error("foreign key was wrong value", a.RootID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RootID))
		reflect.Indirect(reflect.ValueOf(&a.RootID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RootID, x.AuthorReviewsID) {
			t.Error("foreign key was wrong value", a.RootID, x.AuthorReviewsID)
		}
	}
}

func testAuthorreviewToOneRemoveOpAuthorreviewUsingRoot(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Authorreview
	var b Authorreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorreviewDBTypes, false, strmangle.SetComplement(authorreviewPrimaryKeyColumns, authorreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoot(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoot(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Root().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Root != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RootID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RootAuthorreviews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAuthorreviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthorreviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorreviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthorreviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Authorreviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authorreviewDBTypes = map[string]string{`AuthorReviewsID`: `uuid`, `RootID`: `uuid`, `AuthorID`: `uuid`, `UserID`: `uuid`, `Content`: `character varying`}
	_                   = bytes.MinRead
)

func testAuthorreviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authorreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authorreviewAllColumns) == len(authorreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthorreviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authorreviewAllColumns) == len(authorreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Authorreview{}
	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorreviewDBTypes, true, authorreviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authorreviewAllColumns, authorreviewPrimaryKeyColumns) {
		fields = authorreviewAllColumns
	} else {
		fields = strmangle.SetComplement(
			authorreviewAllColumns,
			authorreviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthorreviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthorreviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(authorreviewAllColumns) == len(authorreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Authorreview{}
	if err = randomize.Struct(seed, &o, authorreviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Authorreview: %s", err)
	}

	count, err := Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authorreviewDBTypes, false, authorreviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Authorreview struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Authorreview: %s", err)
	}

	count, err = Authorreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
