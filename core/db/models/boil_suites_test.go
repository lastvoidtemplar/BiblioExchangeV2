// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Authors", testAuthors)
	t.Run("Authorpageratings", testAuthorpageratings)
	t.Run("Authorreviews", testAuthorreviews)
	t.Run("Bookpageratings", testBookpageratings)
	t.Run("Bookreviews", testBookreviews)
	t.Run("Books", testBooks)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("Listings", testListings)
	t.Run("Listingsurls", testListingsurls)
	t.Run("Messages", testMessages)
}

func TestDelete(t *testing.T) {
	t.Run("Authors", testAuthorsDelete)
	t.Run("Authorpageratings", testAuthorpageratingsDelete)
	t.Run("Authorreviews", testAuthorreviewsDelete)
	t.Run("Bookpageratings", testBookpageratingsDelete)
	t.Run("Bookreviews", testBookreviewsDelete)
	t.Run("Books", testBooksDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("Listings", testListingsDelete)
	t.Run("Listingsurls", testListingsurlsDelete)
	t.Run("Messages", testMessagesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsQueryDeleteAll)
	t.Run("Authorpageratings", testAuthorpageratingsQueryDeleteAll)
	t.Run("Authorreviews", testAuthorreviewsQueryDeleteAll)
	t.Run("Bookpageratings", testBookpageratingsQueryDeleteAll)
	t.Run("Bookreviews", testBookreviewsQueryDeleteAll)
	t.Run("Books", testBooksQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("Listings", testListingsQueryDeleteAll)
	t.Run("Listingsurls", testListingsurlsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceDeleteAll)
	t.Run("Authorpageratings", testAuthorpageratingsSliceDeleteAll)
	t.Run("Authorreviews", testAuthorreviewsSliceDeleteAll)
	t.Run("Bookpageratings", testBookpageratingsSliceDeleteAll)
	t.Run("Bookreviews", testBookreviewsSliceDeleteAll)
	t.Run("Books", testBooksSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("Listings", testListingsSliceDeleteAll)
	t.Run("Listingsurls", testListingsurlsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Authors", testAuthorsExists)
	t.Run("Authorpageratings", testAuthorpageratingsExists)
	t.Run("Authorreviews", testAuthorreviewsExists)
	t.Run("Bookpageratings", testBookpageratingsExists)
	t.Run("Bookreviews", testBookreviewsExists)
	t.Run("Books", testBooksExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("Listings", testListingsExists)
	t.Run("Listingsurls", testListingsurlsExists)
	t.Run("Messages", testMessagesExists)
}

func TestFind(t *testing.T) {
	t.Run("Authors", testAuthorsFind)
	t.Run("Authorpageratings", testAuthorpageratingsFind)
	t.Run("Authorreviews", testAuthorreviewsFind)
	t.Run("Bookpageratings", testBookpageratingsFind)
	t.Run("Bookreviews", testBookreviewsFind)
	t.Run("Books", testBooksFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("Listings", testListingsFind)
	t.Run("Listingsurls", testListingsurlsFind)
	t.Run("Messages", testMessagesFind)
}

func TestBind(t *testing.T) {
	t.Run("Authors", testAuthorsBind)
	t.Run("Authorpageratings", testAuthorpageratingsBind)
	t.Run("Authorreviews", testAuthorreviewsBind)
	t.Run("Bookpageratings", testBookpageratingsBind)
	t.Run("Bookreviews", testBookreviewsBind)
	t.Run("Books", testBooksBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("Listings", testListingsBind)
	t.Run("Listingsurls", testListingsurlsBind)
	t.Run("Messages", testMessagesBind)
}

func TestOne(t *testing.T) {
	t.Run("Authors", testAuthorsOne)
	t.Run("Authorpageratings", testAuthorpageratingsOne)
	t.Run("Authorreviews", testAuthorreviewsOne)
	t.Run("Bookpageratings", testBookpageratingsOne)
	t.Run("Bookreviews", testBookreviewsOne)
	t.Run("Books", testBooksOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("Listings", testListingsOne)
	t.Run("Listingsurls", testListingsurlsOne)
	t.Run("Messages", testMessagesOne)
}

func TestAll(t *testing.T) {
	t.Run("Authors", testAuthorsAll)
	t.Run("Authorpageratings", testAuthorpageratingsAll)
	t.Run("Authorreviews", testAuthorreviewsAll)
	t.Run("Bookpageratings", testBookpageratingsAll)
	t.Run("Bookreviews", testBookreviewsAll)
	t.Run("Books", testBooksAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("Listings", testListingsAll)
	t.Run("Listingsurls", testListingsurlsAll)
	t.Run("Messages", testMessagesAll)
}

func TestCount(t *testing.T) {
	t.Run("Authors", testAuthorsCount)
	t.Run("Authorpageratings", testAuthorpageratingsCount)
	t.Run("Authorreviews", testAuthorreviewsCount)
	t.Run("Bookpageratings", testBookpageratingsCount)
	t.Run("Bookreviews", testBookreviewsCount)
	t.Run("Books", testBooksCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("Listings", testListingsCount)
	t.Run("Listingsurls", testListingsurlsCount)
	t.Run("Messages", testMessagesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Authors", testAuthorsHooks)
	t.Run("Authorpageratings", testAuthorpageratingsHooks)
	t.Run("Authorreviews", testAuthorreviewsHooks)
	t.Run("Bookpageratings", testBookpageratingsHooks)
	t.Run("Bookreviews", testBookreviewsHooks)
	t.Run("Books", testBooksHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("Listings", testListingsHooks)
	t.Run("Listingsurls", testListingsurlsHooks)
	t.Run("Messages", testMessagesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Authors", testAuthorsInsert)
	t.Run("Authors", testAuthorsInsertWhitelist)
	t.Run("Authorpageratings", testAuthorpageratingsInsert)
	t.Run("Authorpageratings", testAuthorpageratingsInsertWhitelist)
	t.Run("Authorreviews", testAuthorreviewsInsert)
	t.Run("Authorreviews", testAuthorreviewsInsertWhitelist)
	t.Run("Bookpageratings", testBookpageratingsInsert)
	t.Run("Bookpageratings", testBookpageratingsInsertWhitelist)
	t.Run("Bookreviews", testBookreviewsInsert)
	t.Run("Bookreviews", testBookreviewsInsertWhitelist)
	t.Run("Books", testBooksInsert)
	t.Run("Books", testBooksInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("Listings", testListingsInsert)
	t.Run("Listings", testListingsInsertWhitelist)
	t.Run("Listingsurls", testListingsurlsInsert)
	t.Run("Listingsurls", testListingsurlsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthorpageratingToAuthorUsingAuthor", testAuthorpageratingToOneAuthorUsingAuthor)
	t.Run("AuthorreviewToAuthorUsingAuthor", testAuthorreviewToOneAuthorUsingAuthor)
	t.Run("AuthorreviewToAuthorreviewUsingRoot", testAuthorreviewToOneAuthorreviewUsingRoot)
	t.Run("BookpageratingToBookUsingBook", testBookpageratingToOneBookUsingBook)
	t.Run("BookreviewToBookUsingBook", testBookreviewToOneBookUsingBook)
	t.Run("BookreviewToBookreviewUsingRoot", testBookreviewToOneBookreviewUsingRoot)
	t.Run("ListingsurlToListingUsingListing", testListingsurlToOneListingUsingListing)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthorToAuthorpageratings", testAuthorToManyAuthorpageratings)
	t.Run("AuthorToAuthorreviews", testAuthorToManyAuthorreviews)
	t.Run("AuthorToBooks", testAuthorToManyBooks)
	t.Run("AuthorreviewToRootAuthorreviews", testAuthorreviewToManyRootAuthorreviews)
	t.Run("BookreviewToRootBookreviews", testBookreviewToManyRootBookreviews)
	t.Run("BookToAuthors", testBookToManyAuthors)
	t.Run("BookToBookpageratings", testBookToManyBookpageratings)
	t.Run("BookToBookreviews", testBookToManyBookreviews)
	t.Run("BookToResourseListings", testBookToManyResourseListings)
	t.Run("ListingToBooks", testListingToManyBooks)
	t.Run("ListingToListingsurls", testListingToManyListingsurls)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthorpageratingToAuthorUsingAuthorpageratings", testAuthorpageratingToOneSetOpAuthorUsingAuthor)
	t.Run("AuthorreviewToAuthorUsingAuthorreviews", testAuthorreviewToOneSetOpAuthorUsingAuthor)
	t.Run("AuthorreviewToAuthorreviewUsingRootAuthorreviews", testAuthorreviewToOneSetOpAuthorreviewUsingRoot)
	t.Run("BookpageratingToBookUsingBookpageratings", testBookpageratingToOneSetOpBookUsingBook)
	t.Run("BookreviewToBookUsingBookreviews", testBookreviewToOneSetOpBookUsingBook)
	t.Run("BookreviewToBookreviewUsingRootBookreviews", testBookreviewToOneSetOpBookreviewUsingRoot)
	t.Run("ListingsurlToListingUsingListingsurls", testListingsurlToOneSetOpListingUsingListing)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AuthorpageratingToAuthorUsingAuthorpageratings", testAuthorpageratingToOneRemoveOpAuthorUsingAuthor)
	t.Run("AuthorreviewToAuthorreviewUsingRootAuthorreviews", testAuthorreviewToOneRemoveOpAuthorreviewUsingRoot)
	t.Run("BookpageratingToBookUsingBookpageratings", testBookpageratingToOneRemoveOpBookUsingBook)
	t.Run("BookreviewToBookUsingBookreviews", testBookreviewToOneRemoveOpBookUsingBook)
	t.Run("BookreviewToBookreviewUsingRootBookreviews", testBookreviewToOneRemoveOpBookreviewUsingRoot)
	t.Run("ListingsurlToListingUsingListingsurls", testListingsurlToOneRemoveOpListingUsingListing)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthorToAuthorpageratings", testAuthorToManyAddOpAuthorpageratings)
	t.Run("AuthorToAuthorreviews", testAuthorToManyAddOpAuthorreviews)
	t.Run("AuthorToBooks", testAuthorToManyAddOpBooks)
	t.Run("AuthorreviewToRootAuthorreviews", testAuthorreviewToManyAddOpRootAuthorreviews)
	t.Run("BookreviewToRootBookreviews", testBookreviewToManyAddOpRootBookreviews)
	t.Run("BookToAuthors", testBookToManyAddOpAuthors)
	t.Run("BookToBookpageratings", testBookToManyAddOpBookpageratings)
	t.Run("BookToBookreviews", testBookToManyAddOpBookreviews)
	t.Run("BookToResourseListings", testBookToManyAddOpResourseListings)
	t.Run("ListingToBooks", testListingToManyAddOpBooks)
	t.Run("ListingToListingsurls", testListingToManyAddOpListingsurls)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AuthorToAuthorpageratings", testAuthorToManySetOpAuthorpageratings)
	t.Run("AuthorToBooks", testAuthorToManySetOpBooks)
	t.Run("AuthorreviewToRootAuthorreviews", testAuthorreviewToManySetOpRootAuthorreviews)
	t.Run("BookreviewToRootBookreviews", testBookreviewToManySetOpRootBookreviews)
	t.Run("BookToAuthors", testBookToManySetOpAuthors)
	t.Run("BookToBookpageratings", testBookToManySetOpBookpageratings)
	t.Run("BookToBookreviews", testBookToManySetOpBookreviews)
	t.Run("BookToResourseListings", testBookToManySetOpResourseListings)
	t.Run("ListingToBooks", testListingToManySetOpBooks)
	t.Run("ListingToListingsurls", testListingToManySetOpListingsurls)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AuthorToAuthorpageratings", testAuthorToManyRemoveOpAuthorpageratings)
	t.Run("AuthorToBooks", testAuthorToManyRemoveOpBooks)
	t.Run("AuthorreviewToRootAuthorreviews", testAuthorreviewToManyRemoveOpRootAuthorreviews)
	t.Run("BookreviewToRootBookreviews", testBookreviewToManyRemoveOpRootBookreviews)
	t.Run("BookToAuthors", testBookToManyRemoveOpAuthors)
	t.Run("BookToBookpageratings", testBookToManyRemoveOpBookpageratings)
	t.Run("BookToBookreviews", testBookToManyRemoveOpBookreviews)
	t.Run("BookToResourseListings", testBookToManyRemoveOpResourseListings)
	t.Run("ListingToBooks", testListingToManyRemoveOpBooks)
	t.Run("ListingToListingsurls", testListingToManyRemoveOpListingsurls)
}

func TestReload(t *testing.T) {
	t.Run("Authors", testAuthorsReload)
	t.Run("Authorpageratings", testAuthorpageratingsReload)
	t.Run("Authorreviews", testAuthorreviewsReload)
	t.Run("Bookpageratings", testBookpageratingsReload)
	t.Run("Bookreviews", testBookreviewsReload)
	t.Run("Books", testBooksReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("Listings", testListingsReload)
	t.Run("Listingsurls", testListingsurlsReload)
	t.Run("Messages", testMessagesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Authors", testAuthorsReloadAll)
	t.Run("Authorpageratings", testAuthorpageratingsReloadAll)
	t.Run("Authorreviews", testAuthorreviewsReloadAll)
	t.Run("Bookpageratings", testBookpageratingsReloadAll)
	t.Run("Bookreviews", testBookreviewsReloadAll)
	t.Run("Books", testBooksReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("Listings", testListingsReloadAll)
	t.Run("Listingsurls", testListingsurlsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Authors", testAuthorsSelect)
	t.Run("Authorpageratings", testAuthorpageratingsSelect)
	t.Run("Authorreviews", testAuthorreviewsSelect)
	t.Run("Bookpageratings", testBookpageratingsSelect)
	t.Run("Bookreviews", testBookreviewsSelect)
	t.Run("Books", testBooksSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("Listings", testListingsSelect)
	t.Run("Listingsurls", testListingsurlsSelect)
	t.Run("Messages", testMessagesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Authors", testAuthorsUpdate)
	t.Run("Authorpageratings", testAuthorpageratingsUpdate)
	t.Run("Authorreviews", testAuthorreviewsUpdate)
	t.Run("Bookpageratings", testBookpageratingsUpdate)
	t.Run("Bookreviews", testBookreviewsUpdate)
	t.Run("Books", testBooksUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("Listings", testListingsUpdate)
	t.Run("Listingsurls", testListingsurlsUpdate)
	t.Run("Messages", testMessagesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceUpdateAll)
	t.Run("Authorpageratings", testAuthorpageratingsSliceUpdateAll)
	t.Run("Authorreviews", testAuthorreviewsSliceUpdateAll)
	t.Run("Bookpageratings", testBookpageratingsSliceUpdateAll)
	t.Run("Bookreviews", testBookreviewsSliceUpdateAll)
	t.Run("Books", testBooksSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("Listings", testListingsSliceUpdateAll)
	t.Run("Listingsurls", testListingsurlsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
}
