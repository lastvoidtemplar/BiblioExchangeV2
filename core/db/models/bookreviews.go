// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Bookreview is an object representing the database table.
type Bookreview struct {
	BookReviewsID string      `boil:"book_reviews_id" json:"book_reviews_id" toml:"book_reviews_id" yaml:"book_reviews_id"`
	RootID        null.String `boil:"root_id" json:"root_id,omitempty" toml:"root_id" yaml:"root_id,omitempty"`
	BookID        null.String `boil:"book_id" json:"book_id,omitempty" toml:"book_id" yaml:"book_id,omitempty"`
	UserID        string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Content       string      `boil:"content" json:"content" toml:"content" yaml:"content"`

	R *bookreviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookreviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookreviewColumns = struct {
	BookReviewsID string
	RootID        string
	BookID        string
	UserID        string
	Content       string
}{
	BookReviewsID: "book_reviews_id",
	RootID:        "root_id",
	BookID:        "book_id",
	UserID:        "user_id",
	Content:       "content",
}

var BookreviewTableColumns = struct {
	BookReviewsID string
	RootID        string
	BookID        string
	UserID        string
	Content       string
}{
	BookReviewsID: "bookreviews.book_reviews_id",
	RootID:        "bookreviews.root_id",
	BookID:        "bookreviews.book_id",
	UserID:        "bookreviews.user_id",
	Content:       "bookreviews.content",
}

// Generated where

var BookreviewWhere = struct {
	BookReviewsID whereHelperstring
	RootID        whereHelpernull_String
	BookID        whereHelpernull_String
	UserID        whereHelperstring
	Content       whereHelperstring
}{
	BookReviewsID: whereHelperstring{field: "\"bookreviews\".\"book_reviews_id\""},
	RootID:        whereHelpernull_String{field: "\"bookreviews\".\"root_id\""},
	BookID:        whereHelpernull_String{field: "\"bookreviews\".\"book_id\""},
	UserID:        whereHelperstring{field: "\"bookreviews\".\"user_id\""},
	Content:       whereHelperstring{field: "\"bookreviews\".\"content\""},
}

// BookreviewRels is where relationship names are stored.
var BookreviewRels = struct {
	Book            string
	Root            string
	RootBookreviews string
}{
	Book:            "Book",
	Root:            "Root",
	RootBookreviews: "RootBookreviews",
}

// bookreviewR is where relationships are stored.
type bookreviewR struct {
	Book            *Book           `boil:"Book" json:"Book" toml:"Book" yaml:"Book"`
	Root            *Bookreview     `boil:"Root" json:"Root" toml:"Root" yaml:"Root"`
	RootBookreviews BookreviewSlice `boil:"RootBookreviews" json:"RootBookreviews" toml:"RootBookreviews" yaml:"RootBookreviews"`
}

// NewStruct creates a new relationship struct
func (*bookreviewR) NewStruct() *bookreviewR {
	return &bookreviewR{}
}

func (r *bookreviewR) GetBook() *Book {
	if r == nil {
		return nil
	}
	return r.Book
}

func (r *bookreviewR) GetRoot() *Bookreview {
	if r == nil {
		return nil
	}
	return r.Root
}

func (r *bookreviewR) GetRootBookreviews() BookreviewSlice {
	if r == nil {
		return nil
	}
	return r.RootBookreviews
}

// bookreviewL is where Load methods for each relationship are stored.
type bookreviewL struct{}

var (
	bookreviewAllColumns            = []string{"book_reviews_id", "root_id", "book_id", "user_id", "content"}
	bookreviewColumnsWithoutDefault = []string{"user_id", "content"}
	bookreviewColumnsWithDefault    = []string{"book_reviews_id", "root_id", "book_id"}
	bookreviewPrimaryKeyColumns     = []string{"book_reviews_id"}
	bookreviewGeneratedColumns      = []string{}
)

type (
	// BookreviewSlice is an alias for a slice of pointers to Bookreview.
	// This should almost always be used instead of []Bookreview.
	BookreviewSlice []*Bookreview
	// BookreviewHook is the signature for custom Bookreview hook methods
	BookreviewHook func(context.Context, boil.ContextExecutor, *Bookreview) error

	bookreviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookreviewType                 = reflect.TypeOf(&Bookreview{})
	bookreviewMapping              = queries.MakeStructMapping(bookreviewType)
	bookreviewPrimaryKeyMapping, _ = queries.BindMapping(bookreviewType, bookreviewMapping, bookreviewPrimaryKeyColumns)
	bookreviewInsertCacheMut       sync.RWMutex
	bookreviewInsertCache          = make(map[string]insertCache)
	bookreviewUpdateCacheMut       sync.RWMutex
	bookreviewUpdateCache          = make(map[string]updateCache)
	bookreviewUpsertCacheMut       sync.RWMutex
	bookreviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookreviewAfterSelectHooks []BookreviewHook

var bookreviewBeforeInsertHooks []BookreviewHook
var bookreviewAfterInsertHooks []BookreviewHook

var bookreviewBeforeUpdateHooks []BookreviewHook
var bookreviewAfterUpdateHooks []BookreviewHook

var bookreviewBeforeDeleteHooks []BookreviewHook
var bookreviewAfterDeleteHooks []BookreviewHook

var bookreviewBeforeUpsertHooks []BookreviewHook
var bookreviewAfterUpsertHooks []BookreviewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Bookreview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Bookreview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Bookreview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Bookreview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Bookreview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Bookreview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Bookreview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Bookreview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Bookreview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookreviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookreviewHook registers your hook function for all future operations.
func AddBookreviewHook(hookPoint boil.HookPoint, bookreviewHook BookreviewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookreviewAfterSelectHooks = append(bookreviewAfterSelectHooks, bookreviewHook)
	case boil.BeforeInsertHook:
		bookreviewBeforeInsertHooks = append(bookreviewBeforeInsertHooks, bookreviewHook)
	case boil.AfterInsertHook:
		bookreviewAfterInsertHooks = append(bookreviewAfterInsertHooks, bookreviewHook)
	case boil.BeforeUpdateHook:
		bookreviewBeforeUpdateHooks = append(bookreviewBeforeUpdateHooks, bookreviewHook)
	case boil.AfterUpdateHook:
		bookreviewAfterUpdateHooks = append(bookreviewAfterUpdateHooks, bookreviewHook)
	case boil.BeforeDeleteHook:
		bookreviewBeforeDeleteHooks = append(bookreviewBeforeDeleteHooks, bookreviewHook)
	case boil.AfterDeleteHook:
		bookreviewAfterDeleteHooks = append(bookreviewAfterDeleteHooks, bookreviewHook)
	case boil.BeforeUpsertHook:
		bookreviewBeforeUpsertHooks = append(bookreviewBeforeUpsertHooks, bookreviewHook)
	case boil.AfterUpsertHook:
		bookreviewAfterUpsertHooks = append(bookreviewAfterUpsertHooks, bookreviewHook)
	}
}

// OneG returns a single bookreview record from the query using the global executor.
func (q bookreviewQuery) OneG(ctx context.Context) (*Bookreview, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single bookreview record from the query.
func (q bookreviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Bookreview, error) {
	o := &Bookreview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for bookreviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Bookreview records from the query using the global executor.
func (q bookreviewQuery) AllG(ctx context.Context) (BookreviewSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Bookreview records from the query.
func (q bookreviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookreviewSlice, error) {
	var o []*Bookreview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Bookreview slice")
	}

	if len(bookreviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Bookreview records in the query using the global executor
func (q bookreviewQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Bookreview records in the query.
func (q bookreviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count bookreviews rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q bookreviewQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookreviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if bookreviews exists")
	}

	return count > 0, nil
}

// Book pointed to by the foreign key.
func (o *Bookreview) Book(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"book_id\" = ?", o.BookID),
	}

	queryMods = append(queryMods, mods...)

	return Books(queryMods...)
}

// Root pointed to by the foreign key.
func (o *Bookreview) Root(mods ...qm.QueryMod) bookreviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"book_reviews_id\" = ?", o.RootID),
	}

	queryMods = append(queryMods, mods...)

	return Bookreviews(queryMods...)
}

// RootBookreviews retrieves all the bookreview's Bookreviews with an executor via root_id column.
func (o *Bookreview) RootBookreviews(mods ...qm.QueryMod) bookreviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bookreviews\".\"root_id\"=?", o.BookReviewsID),
	)

	return Bookreviews(queryMods...)
}

// LoadBook allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookreviewL) LoadBook(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookreview interface{}, mods queries.Applicator) error {
	var slice []*Bookreview
	var object *Bookreview

	if singular {
		var ok bool
		object, ok = maybeBookreview.(*Bookreview)
		if !ok {
			object = new(Bookreview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBookreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBookreview))
			}
		}
	} else {
		s, ok := maybeBookreview.(*[]*Bookreview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBookreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBookreview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookreviewR{}
		}
		if !queries.IsNil(object.BookID) {
			args = append(args, object.BookID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookreviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BookID) {
				args = append(args, obj.BookID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`books`),
		qm.WhereIn(`books.book_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Book = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.Bookreviews = append(foreign.R.Bookreviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BookID, foreign.BookID) {
				local.R.Book = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Bookreviews = append(foreign.R.Bookreviews, local)
				break
			}
		}
	}

	return nil
}

// LoadRoot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookreviewL) LoadRoot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookreview interface{}, mods queries.Applicator) error {
	var slice []*Bookreview
	var object *Bookreview

	if singular {
		var ok bool
		object, ok = maybeBookreview.(*Bookreview)
		if !ok {
			object = new(Bookreview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBookreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBookreview))
			}
		}
	} else {
		s, ok := maybeBookreview.(*[]*Bookreview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBookreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBookreview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookreviewR{}
		}
		if !queries.IsNil(object.RootID) {
			args = append(args, object.RootID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookreviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RootID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RootID) {
				args = append(args, obj.RootID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookreviews`),
		qm.WhereIn(`bookreviews.book_reviews_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bookreview")
	}

	var resultSlice []*Bookreview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bookreview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bookreviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookreviews")
	}

	if len(bookreviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Root = foreign
		if foreign.R == nil {
			foreign.R = &bookreviewR{}
		}
		foreign.R.RootBookreviews = append(foreign.R.RootBookreviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RootID, foreign.BookReviewsID) {
				local.R.Root = foreign
				if foreign.R == nil {
					foreign.R = &bookreviewR{}
				}
				foreign.R.RootBookreviews = append(foreign.R.RootBookreviews, local)
				break
			}
		}
	}

	return nil
}

// LoadRootBookreviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookreviewL) LoadRootBookreviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookreview interface{}, mods queries.Applicator) error {
	var slice []*Bookreview
	var object *Bookreview

	if singular {
		var ok bool
		object, ok = maybeBookreview.(*Bookreview)
		if !ok {
			object = new(Bookreview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBookreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBookreview))
			}
		}
	} else {
		s, ok := maybeBookreview.(*[]*Bookreview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBookreview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBookreview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookreviewR{}
		}
		args = append(args, object.BookReviewsID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookreviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookReviewsID) {
					continue Outer
				}
			}

			args = append(args, obj.BookReviewsID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookreviews`),
		qm.WhereIn(`bookreviews.root_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookreviews")
	}

	var resultSlice []*Bookreview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookreviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookreviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookreviews")
	}

	if len(bookreviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RootBookreviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookreviewR{}
			}
			foreign.R.Root = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BookReviewsID, foreign.RootID) {
				local.R.RootBookreviews = append(local.R.RootBookreviews, foreign)
				if foreign.R == nil {
					foreign.R = &bookreviewR{}
				}
				foreign.R.Root = local
				break
			}
		}
	}

	return nil
}

// SetBookG of the bookreview to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.Bookreviews.
// Uses the global database handle.
func (o *Bookreview) SetBookG(ctx context.Context, insert bool, related *Book) error {
	return o.SetBook(ctx, boil.GetContextDB(), insert, related)
}

// SetBook of the bookreview to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.Bookreviews.
func (o *Bookreview) SetBook(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bookreviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"book_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookreviewPrimaryKeyColumns),
	)
	values := []interface{}{related.BookID, o.BookReviewsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BookID, related.BookID)
	if o.R == nil {
		o.R = &bookreviewR{
			Book: related,
		}
	} else {
		o.R.Book = related
	}

	if related.R == nil {
		related.R = &bookR{
			Bookreviews: BookreviewSlice{o},
		}
	} else {
		related.R.Bookreviews = append(related.R.Bookreviews, o)
	}

	return nil
}

// RemoveBookG relationship.
// Sets o.R.Book to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Bookreview) RemoveBookG(ctx context.Context, related *Book) error {
	return o.RemoveBook(ctx, boil.GetContextDB(), related)
}

// RemoveBook relationship.
// Sets o.R.Book to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Bookreview) RemoveBook(ctx context.Context, exec boil.ContextExecutor, related *Book) error {
	var err error

	queries.SetScanner(&o.BookID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("book_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Book = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Bookreviews {
		if queries.Equal(o.BookID, ri.BookID) {
			continue
		}

		ln := len(related.R.Bookreviews)
		if ln > 1 && i < ln-1 {
			related.R.Bookreviews[i] = related.R.Bookreviews[ln-1]
		}
		related.R.Bookreviews = related.R.Bookreviews[:ln-1]
		break
	}
	return nil
}

// SetRootG of the bookreview to the related item.
// Sets o.R.Root to related.
// Adds o to related.R.RootBookreviews.
// Uses the global database handle.
func (o *Bookreview) SetRootG(ctx context.Context, insert bool, related *Bookreview) error {
	return o.SetRoot(ctx, boil.GetContextDB(), insert, related)
}

// SetRoot of the bookreview to the related item.
// Sets o.R.Root to related.
// Adds o to related.R.RootBookreviews.
func (o *Bookreview) SetRoot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bookreview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bookreviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"root_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookreviewPrimaryKeyColumns),
	)
	values := []interface{}{related.BookReviewsID, o.BookReviewsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RootID, related.BookReviewsID)
	if o.R == nil {
		o.R = &bookreviewR{
			Root: related,
		}
	} else {
		o.R.Root = related
	}

	if related.R == nil {
		related.R = &bookreviewR{
			RootBookreviews: BookreviewSlice{o},
		}
	} else {
		related.R.RootBookreviews = append(related.R.RootBookreviews, o)
	}

	return nil
}

// RemoveRootG relationship.
// Sets o.R.Root to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Bookreview) RemoveRootG(ctx context.Context, related *Bookreview) error {
	return o.RemoveRoot(ctx, boil.GetContextDB(), related)
}

// RemoveRoot relationship.
// Sets o.R.Root to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Bookreview) RemoveRoot(ctx context.Context, exec boil.ContextExecutor, related *Bookreview) error {
	var err error

	queries.SetScanner(&o.RootID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("root_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Root = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RootBookreviews {
		if queries.Equal(o.RootID, ri.RootID) {
			continue
		}

		ln := len(related.R.RootBookreviews)
		if ln > 1 && i < ln-1 {
			related.R.RootBookreviews[i] = related.R.RootBookreviews[ln-1]
		}
		related.R.RootBookreviews = related.R.RootBookreviews[:ln-1]
		break
	}
	return nil
}

// AddRootBookreviewsG adds the given related objects to the existing relationships
// of the bookreview, optionally inserting them as new records.
// Appends related to o.R.RootBookreviews.
// Sets related.R.Root appropriately.
// Uses the global database handle.
func (o *Bookreview) AddRootBookreviewsG(ctx context.Context, insert bool, related ...*Bookreview) error {
	return o.AddRootBookreviews(ctx, boil.GetContextDB(), insert, related...)
}

// AddRootBookreviews adds the given related objects to the existing relationships
// of the bookreview, optionally inserting them as new records.
// Appends related to o.R.RootBookreviews.
// Sets related.R.Root appropriately.
func (o *Bookreview) AddRootBookreviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookreview) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RootID, o.BookReviewsID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bookreviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"root_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookreviewPrimaryKeyColumns),
			)
			values := []interface{}{o.BookReviewsID, rel.BookReviewsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RootID, o.BookReviewsID)
		}
	}

	if o.R == nil {
		o.R = &bookreviewR{
			RootBookreviews: related,
		}
	} else {
		o.R.RootBookreviews = append(o.R.RootBookreviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookreviewR{
				Root: o,
			}
		} else {
			rel.R.Root = o
		}
	}
	return nil
}

// SetRootBookreviewsG removes all previously related items of the
// bookreview replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Root's RootBookreviews accordingly.
// Replaces o.R.RootBookreviews with related.
// Sets related.R.Root's RootBookreviews accordingly.
// Uses the global database handle.
func (o *Bookreview) SetRootBookreviewsG(ctx context.Context, insert bool, related ...*Bookreview) error {
	return o.SetRootBookreviews(ctx, boil.GetContextDB(), insert, related...)
}

// SetRootBookreviews removes all previously related items of the
// bookreview replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Root's RootBookreviews accordingly.
// Replaces o.R.RootBookreviews with related.
// Sets related.R.Root's RootBookreviews accordingly.
func (o *Bookreview) SetRootBookreviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookreview) error {
	query := "update \"bookreviews\" set \"root_id\" = null where \"root_id\" = $1"
	values := []interface{}{o.BookReviewsID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RootBookreviews {
			queries.SetScanner(&rel.RootID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Root = nil
		}
		o.R.RootBookreviews = nil
	}

	return o.AddRootBookreviews(ctx, exec, insert, related...)
}

// RemoveRootBookreviewsG relationships from objects passed in.
// Removes related items from R.RootBookreviews (uses pointer comparison, removal does not keep order)
// Sets related.R.Root.
// Uses the global database handle.
func (o *Bookreview) RemoveRootBookreviewsG(ctx context.Context, related ...*Bookreview) error {
	return o.RemoveRootBookreviews(ctx, boil.GetContextDB(), related...)
}

// RemoveRootBookreviews relationships from objects passed in.
// Removes related items from R.RootBookreviews (uses pointer comparison, removal does not keep order)
// Sets related.R.Root.
func (o *Bookreview) RemoveRootBookreviews(ctx context.Context, exec boil.ContextExecutor, related ...*Bookreview) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RootID, nil)
		if rel.R != nil {
			rel.R.Root = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("root_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RootBookreviews {
			if rel != ri {
				continue
			}

			ln := len(o.R.RootBookreviews)
			if ln > 1 && i < ln-1 {
				o.R.RootBookreviews[i] = o.R.RootBookreviews[ln-1]
			}
			o.R.RootBookreviews = o.R.RootBookreviews[:ln-1]
			break
		}
	}

	return nil
}

// Bookreviews retrieves all the records using an executor.
func Bookreviews(mods ...qm.QueryMod) bookreviewQuery {
	mods = append(mods, qm.From("\"bookreviews\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bookreviews\".*"})
	}

	return bookreviewQuery{q}
}

// FindBookreviewG retrieves a single record by ID.
func FindBookreviewG(ctx context.Context, bookReviewsID string, selectCols ...string) (*Bookreview, error) {
	return FindBookreview(ctx, boil.GetContextDB(), bookReviewsID, selectCols...)
}

// FindBookreview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookreview(ctx context.Context, exec boil.ContextExecutor, bookReviewsID string, selectCols ...string) (*Bookreview, error) {
	bookreviewObj := &Bookreview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bookreviews\" where \"book_reviews_id\"=$1", sel,
	)

	q := queries.Raw(query, bookReviewsID)

	err := q.Bind(ctx, exec, bookreviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from bookreviews")
	}

	if err = bookreviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookreviewObj, err
	}

	return bookreviewObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Bookreview) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bookreview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no bookreviews provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookreviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookreviewInsertCacheMut.RLock()
	cache, cached := bookreviewInsertCache[key]
	bookreviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookreviewAllColumns,
			bookreviewColumnsWithDefault,
			bookreviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookreviewType, bookreviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookreviewType, bookreviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bookreviews\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bookreviews\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into bookreviews")
	}

	if !cached {
		bookreviewInsertCacheMut.Lock()
		bookreviewInsertCache[key] = cache
		bookreviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Bookreview record using the global executor.
// See Update for more documentation.
func (o *Bookreview) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Bookreview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bookreview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookreviewUpdateCacheMut.RLock()
	cache, cached := bookreviewUpdateCache[key]
	bookreviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookreviewAllColumns,
			bookreviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update bookreviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bookreviews\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookreviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookreviewType, bookreviewMapping, append(wl, bookreviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update bookreviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for bookreviews")
	}

	if !cached {
		bookreviewUpdateCacheMut.Lock()
		bookreviewUpdateCache[key] = cache
		bookreviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookreviewQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookreviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for bookreviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for bookreviews")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookreviewSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookreviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookreviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bookreviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookreviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in bookreview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all bookreview")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Bookreview) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bookreview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no bookreviews provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookreviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookreviewUpsertCacheMut.RLock()
	cache, cached := bookreviewUpsertCache[key]
	bookreviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookreviewAllColumns,
			bookreviewColumnsWithDefault,
			bookreviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookreviewAllColumns,
			bookreviewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert bookreviews, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookreviewPrimaryKeyColumns))
			copy(conflict, bookreviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bookreviews\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookreviewType, bookreviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookreviewType, bookreviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert bookreviews")
	}

	if !cached {
		bookreviewUpsertCacheMut.Lock()
		bookreviewUpsertCache[key] = cache
		bookreviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Bookreview record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Bookreview) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Bookreview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bookreview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Bookreview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookreviewPrimaryKeyMapping)
	sql := "DELETE FROM \"bookreviews\" WHERE \"book_reviews_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from bookreviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for bookreviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q bookreviewQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q bookreviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no bookreviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from bookreviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for bookreviews")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookreviewSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookreviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookreviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookreviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bookreviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookreviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from bookreview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for bookreviews")
	}

	if len(bookreviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Bookreview) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Bookreview provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bookreview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookreview(ctx, exec, o.BookReviewsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookreviewSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty BookreviewSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookreviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookreviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookreviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bookreviews\".* FROM \"bookreviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookreviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in BookreviewSlice")
	}

	*o = slice

	return nil
}

// BookreviewExistsG checks if the Bookreview row exists.
func BookreviewExistsG(ctx context.Context, bookReviewsID string) (bool, error) {
	return BookreviewExists(ctx, boil.GetContextDB(), bookReviewsID)
}

// BookreviewExists checks if the Bookreview row exists.
func BookreviewExists(ctx context.Context, exec boil.ContextExecutor, bookReviewsID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bookreviews\" where \"book_reviews_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bookReviewsID)
	}
	row := exec.QueryRowContext(ctx, sql, bookReviewsID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if bookreviews exists")
	}

	return exists, nil
}

// Exists checks if the Bookreview row exists.
func (o *Bookreview) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookreviewExists(ctx, exec, o.BookReviewsID)
}
