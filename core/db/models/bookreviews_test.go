// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookreviews(t *testing.T) {
	t.Parallel()

	query := Bookreviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookreviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookreviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bookreviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookreviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookreviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookreviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookreviewExists(ctx, tx, o.BookReviewsID)
	if err != nil {
		t.Errorf("Unable to check if Bookreview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookreviewExists to return true, but got false.")
	}
}

func testBookreviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookreviewFound, err := FindBookreview(ctx, tx, o.BookReviewsID)
	if err != nil {
		t.Error(err)
	}

	if bookreviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookreviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bookreviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookreviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bookreviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookreviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookreviewOne := &Bookreview{}
	bookreviewTwo := &Bookreview{}
	if err = randomize.Struct(seed, bookreviewOne, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}
	if err = randomize.Struct(seed, bookreviewTwo, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookreviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookreviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bookreviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookreviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookreviewOne := &Bookreview{}
	bookreviewTwo := &Bookreview{}
	if err = randomize.Struct(seed, bookreviewOne, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}
	if err = randomize.Struct(seed, bookreviewTwo, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookreviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookreviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookreviewBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func bookreviewAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
	*o = Bookreview{}
	return nil
}

func testBookreviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Bookreview{}
	o := &Bookreview{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookreviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bookreview object: %s", err)
	}

	AddBookreviewHook(boil.BeforeInsertHook, bookreviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookreviewBeforeInsertHooks = []BookreviewHook{}

	AddBookreviewHook(boil.AfterInsertHook, bookreviewAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookreviewAfterInsertHooks = []BookreviewHook{}

	AddBookreviewHook(boil.AfterSelectHook, bookreviewAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookreviewAfterSelectHooks = []BookreviewHook{}

	AddBookreviewHook(boil.BeforeUpdateHook, bookreviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookreviewBeforeUpdateHooks = []BookreviewHook{}

	AddBookreviewHook(boil.AfterUpdateHook, bookreviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookreviewAfterUpdateHooks = []BookreviewHook{}

	AddBookreviewHook(boil.BeforeDeleteHook, bookreviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookreviewBeforeDeleteHooks = []BookreviewHook{}

	AddBookreviewHook(boil.AfterDeleteHook, bookreviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookreviewAfterDeleteHooks = []BookreviewHook{}

	AddBookreviewHook(boil.BeforeUpsertHook, bookreviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookreviewBeforeUpsertHooks = []BookreviewHook{}

	AddBookreviewHook(boil.AfterUpsertHook, bookreviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookreviewAfterUpsertHooks = []BookreviewHook{}
}

func testBookreviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookreviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookreviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookreviewToManyRootBookreviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b, c Bookreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RootID, a.BookReviewsID)
	queries.Assign(&c.RootID, a.BookReviewsID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RootBookreviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RootID, b.RootID) {
			bFound = true
		}
		if queries.Equal(v.RootID, c.RootID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BookreviewSlice{&a}
	if err = a.L.LoadRootBookreviews(ctx, tx, false, (*[]*Bookreview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RootBookreviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RootBookreviews = nil
	if err = a.L.LoadRootBookreviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RootBookreviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBookreviewToManyAddOpRootBookreviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b, c, d, e Bookreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Bookreview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Bookreview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRootBookreviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.BookReviewsID, first.RootID) {
			t.Error("foreign key was wrong value", a.BookReviewsID, first.RootID)
		}
		if !queries.Equal(a.BookReviewsID, second.RootID) {
			t.Error("foreign key was wrong value", a.BookReviewsID, second.RootID)
		}

		if first.R.Root != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Root != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RootBookreviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RootBookreviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RootBookreviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBookreviewToManySetOpRootBookreviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b, c, d, e Bookreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Bookreview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRootBookreviews(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RootBookreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRootBookreviews(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RootBookreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RootID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RootID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.BookReviewsID, d.RootID) {
		t.Error("foreign key was wrong value", a.BookReviewsID, d.RootID)
	}
	if !queries.Equal(a.BookReviewsID, e.RootID) {
		t.Error("foreign key was wrong value", a.BookReviewsID, e.RootID)
	}

	if b.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Root != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Root != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RootBookreviews[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RootBookreviews[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBookreviewToManyRemoveOpRootBookreviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b, c, d, e Bookreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Bookreview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRootBookreviews(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RootBookreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRootBookreviews(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RootBookreviews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RootID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RootID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Root != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Root != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Root != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RootBookreviews) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RootBookreviews[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RootBookreviews[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBookreviewToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Bookreview
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BookID, foreign.BookID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.BookID, foreign.BookID) {
		t.Errorf("want: %v, got %v", foreign.BookID, check.BookID)
	}

	ranAfterSelectHook := false
	AddBookHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Book) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BookreviewSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*Bookreview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBookreviewToOneBookreviewUsingRoot(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Bookreview
	var foreign Bookreview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookreviewDBTypes, false, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RootID, foreign.BookReviewsID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Root().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.BookReviewsID, foreign.BookReviewsID) {
		t.Errorf("want: %v, got %v", foreign.BookReviewsID, check.BookReviewsID)
	}

	ranAfterSelectHook := false
	AddBookreviewHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Bookreview) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BookreviewSlice{&local}
	if err = local.L.LoadRoot(ctx, tx, false, (*[]*Bookreview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Root == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Root = nil
	if err = local.L.LoadRoot(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Root == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBookreviewToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Bookreviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BookID, x.BookID) {
			t.Error("foreign key was wrong value", a.BookID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookID))
		reflect.Indirect(reflect.ValueOf(&a.BookID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BookID, x.BookID) {
			t.Error("foreign key was wrong value", a.BookID, x.BookID)
		}
	}
}

func testBookreviewToOneRemoveOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBook(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBook(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Book().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Book != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BookID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Bookreviews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookreviewToOneSetOpBookreviewUsingRoot(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b, c Bookreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Bookreview{&b, &c} {
		err = a.SetRoot(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Root != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RootBookreviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RootID, x.BookReviewsID) {
			t.Error("foreign key was wrong value", a.RootID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RootID))
		reflect.Indirect(reflect.ValueOf(&a.RootID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RootID, x.BookReviewsID) {
			t.Error("foreign key was wrong value", a.RootID, x.BookReviewsID)
		}
	}
}

func testBookreviewToOneRemoveOpBookreviewUsingRoot(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bookreview
	var b Bookreview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookreviewDBTypes, false, strmangle.SetComplement(bookreviewPrimaryKeyColumns, bookreviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoot(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoot(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Root().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Root != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RootID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RootBookreviews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBookreviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookreviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookreviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookreviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bookreviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookreviewDBTypes = map[string]string{`BookReviewsID`: `uuid`, `RootID`: `uuid`, `BookID`: `uuid`, `UserID`: `uuid`, `Content`: `character varying`}
	_                 = bytes.MinRead
)

func testBookreviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookreviewAllColumns) == len(bookreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookreviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookreviewAllColumns) == len(bookreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bookreview{}
	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookreviewDBTypes, true, bookreviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookreviewAllColumns, bookreviewPrimaryKeyColumns) {
		fields = bookreviewAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookreviewAllColumns,
			bookreviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookreviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookreviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(bookreviewAllColumns) == len(bookreviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Bookreview{}
	if err = randomize.Struct(seed, &o, bookreviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bookreview: %s", err)
	}

	count, err := Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookreviewDBTypes, false, bookreviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bookreview struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bookreview: %s", err)
	}

	count, err = Bookreviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
