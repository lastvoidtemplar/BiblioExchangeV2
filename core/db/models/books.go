// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Book is an object representing the database table.
type Book struct {
	BookID            string      `boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	Isbn              null.String `boil:"isbn" json:"isbn,omitempty" toml:"isbn" yaml:"isbn,omitempty"`
	Title             string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	DateOfPublication null.Time   `boil:"date_of_publication" json:"date_of_publication,omitempty" toml:"date_of_publication" yaml:"date_of_publication,omitempty"`
	Plot              null.String `boil:"plot" json:"plot,omitempty" toml:"plot" yaml:"plot,omitempty"`
	Genre             null.Int    `boil:"genre" json:"genre,omitempty" toml:"genre" yaml:"genre,omitempty"`

	R *bookR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookColumns = struct {
	BookID            string
	Isbn              string
	Title             string
	DateOfPublication string
	Plot              string
	Genre             string
}{
	BookID:            "book_id",
	Isbn:              "isbn",
	Title:             "title",
	DateOfPublication: "date_of_publication",
	Plot:              "plot",
	Genre:             "genre",
}

var BookTableColumns = struct {
	BookID            string
	Isbn              string
	Title             string
	DateOfPublication string
	Plot              string
	Genre             string
}{
	BookID:            "books.book_id",
	Isbn:              "books.isbn",
	Title:             "books.title",
	DateOfPublication: "books.date_of_publication",
	Plot:              "books.plot",
	Genre:             "books.genre",
}

// Generated where

var BookWhere = struct {
	BookID            whereHelperstring
	Isbn              whereHelpernull_String
	Title             whereHelperstring
	DateOfPublication whereHelpernull_Time
	Plot              whereHelpernull_String
	Genre             whereHelpernull_Int
}{
	BookID:            whereHelperstring{field: "\"books\".\"book_id\""},
	Isbn:              whereHelpernull_String{field: "\"books\".\"isbn\""},
	Title:             whereHelperstring{field: "\"books\".\"title\""},
	DateOfPublication: whereHelpernull_Time{field: "\"books\".\"date_of_publication\""},
	Plot:              whereHelpernull_String{field: "\"books\".\"plot\""},
	Genre:             whereHelpernull_Int{field: "\"books\".\"genre\""},
}

// BookRels is where relationship names are stored.
var BookRels = struct {
	Authors          string
	Bookpageratings  string
	Bookreviews      string
	ResourseListings string
}{
	Authors:          "Authors",
	Bookpageratings:  "Bookpageratings",
	Bookreviews:      "Bookreviews",
	ResourseListings: "ResourseListings",
}

// bookR is where relationships are stored.
type bookR struct {
	Authors          AuthorSlice         `boil:"Authors" json:"Authors" toml:"Authors" yaml:"Authors"`
	Bookpageratings  BookpageratingSlice `boil:"Bookpageratings" json:"Bookpageratings" toml:"Bookpageratings" yaml:"Bookpageratings"`
	Bookreviews      BookreviewSlice     `boil:"Bookreviews" json:"Bookreviews" toml:"Bookreviews" yaml:"Bookreviews"`
	ResourseListings ListingSlice        `boil:"ResourseListings" json:"ResourseListings" toml:"ResourseListings" yaml:"ResourseListings"`
}

// NewStruct creates a new relationship struct
func (*bookR) NewStruct() *bookR {
	return &bookR{}
}

func (r *bookR) GetAuthors() AuthorSlice {
	if r == nil {
		return nil
	}
	return r.Authors
}

func (r *bookR) GetBookpageratings() BookpageratingSlice {
	if r == nil {
		return nil
	}
	return r.Bookpageratings
}

func (r *bookR) GetBookreviews() BookreviewSlice {
	if r == nil {
		return nil
	}
	return r.Bookreviews
}

func (r *bookR) GetResourseListings() ListingSlice {
	if r == nil {
		return nil
	}
	return r.ResourseListings
}

// bookL is where Load methods for each relationship are stored.
type bookL struct{}

var (
	bookAllColumns            = []string{"book_id", "isbn", "title", "date_of_publication", "plot", "genre"}
	bookColumnsWithoutDefault = []string{"title"}
	bookColumnsWithDefault    = []string{"book_id", "isbn", "date_of_publication", "plot", "genre"}
	bookPrimaryKeyColumns     = []string{"book_id"}
	bookGeneratedColumns      = []string{}
)

type (
	// BookSlice is an alias for a slice of pointers to Book.
	// This should almost always be used instead of []Book.
	BookSlice []*Book
	// BookHook is the signature for custom Book hook methods
	BookHook func(context.Context, boil.ContextExecutor, *Book) error

	bookQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookType                 = reflect.TypeOf(&Book{})
	bookMapping              = queries.MakeStructMapping(bookType)
	bookPrimaryKeyMapping, _ = queries.BindMapping(bookType, bookMapping, bookPrimaryKeyColumns)
	bookInsertCacheMut       sync.RWMutex
	bookInsertCache          = make(map[string]insertCache)
	bookUpdateCacheMut       sync.RWMutex
	bookUpdateCache          = make(map[string]updateCache)
	bookUpsertCacheMut       sync.RWMutex
	bookUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookAfterSelectHooks []BookHook

var bookBeforeInsertHooks []BookHook
var bookAfterInsertHooks []BookHook

var bookBeforeUpdateHooks []BookHook
var bookAfterUpdateHooks []BookHook

var bookBeforeDeleteHooks []BookHook
var bookAfterDeleteHooks []BookHook

var bookBeforeUpsertHooks []BookHook
var bookAfterUpsertHooks []BookHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Book) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Book) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Book) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Book) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Book) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Book) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Book) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Book) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Book) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookHook registers your hook function for all future operations.
func AddBookHook(hookPoint boil.HookPoint, bookHook BookHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookAfterSelectHooks = append(bookAfterSelectHooks, bookHook)
	case boil.BeforeInsertHook:
		bookBeforeInsertHooks = append(bookBeforeInsertHooks, bookHook)
	case boil.AfterInsertHook:
		bookAfterInsertHooks = append(bookAfterInsertHooks, bookHook)
	case boil.BeforeUpdateHook:
		bookBeforeUpdateHooks = append(bookBeforeUpdateHooks, bookHook)
	case boil.AfterUpdateHook:
		bookAfterUpdateHooks = append(bookAfterUpdateHooks, bookHook)
	case boil.BeforeDeleteHook:
		bookBeforeDeleteHooks = append(bookBeforeDeleteHooks, bookHook)
	case boil.AfterDeleteHook:
		bookAfterDeleteHooks = append(bookAfterDeleteHooks, bookHook)
	case boil.BeforeUpsertHook:
		bookBeforeUpsertHooks = append(bookBeforeUpsertHooks, bookHook)
	case boil.AfterUpsertHook:
		bookAfterUpsertHooks = append(bookAfterUpsertHooks, bookHook)
	}
}

// OneG returns a single book record from the query using the global executor.
func (q bookQuery) OneG(ctx context.Context) (*Book, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single book record from the query.
func (q bookQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Book, error) {
	o := &Book{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for books")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Book records from the query using the global executor.
func (q bookQuery) AllG(ctx context.Context) (BookSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Book records from the query.
func (q bookQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookSlice, error) {
	var o []*Book

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Book slice")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Book records in the query using the global executor
func (q bookQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Book records in the query.
func (q bookQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count books rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q bookQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if books exists")
	}

	return count > 0, nil
}

// Authors retrieves all the author's Authors with an executor.
func (o *Book) Authors(mods ...qm.QueryMod) authorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"authorsbooks\" on \"author\".\"author_id\" = \"authorsbooks\".\"author_id\""),
		qm.Where("\"authorsbooks\".\"book_id\"=?", o.BookID),
	)

	return Authors(queryMods...)
}

// Bookpageratings retrieves all the bookpagerating's Bookpageratings with an executor.
func (o *Book) Bookpageratings(mods ...qm.QueryMod) bookpageratingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bookpageratings\".\"book_id\"=?", o.BookID),
	)

	return Bookpageratings(queryMods...)
}

// Bookreviews retrieves all the bookreview's Bookreviews with an executor.
func (o *Book) Bookreviews(mods ...qm.QueryMod) bookreviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bookreviews\".\"book_id\"=?", o.BookID),
	)

	return Bookreviews(queryMods...)
}

// ResourseListings retrieves all the listing's Listings with an executor via listing_id column.
func (o *Book) ResourseListings(mods ...qm.QueryMod) listingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"listingsbooks\" on \"listings\".\"listing_id\" = \"listingsbooks\".\"resourse_id\""),
		qm.Where("\"listingsbooks\".\"book_id\"=?", o.BookID),
	)

	return Listings(queryMods...)
}

// LoadAuthors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookL) LoadAuthors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBook interface{}, mods queries.Applicator) error {
	var slice []*Book
	var object *Book

	if singular {
		var ok bool
		object, ok = maybeBook.(*Book)
		if !ok {
			object = new(Book)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBook))
			}
		}
	} else {
		s, ok := maybeBook.(*[]*Book)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookR{}
		}
		args = append(args, object.BookID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookR{}
			}

			for _, a := range args {
				if a == obj.BookID {
					continue Outer
				}
			}

			args = append(args, obj.BookID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"author\".\"author_id\", \"author\".\"fullname\", \"author\".\"biography\", \"author\".\"date_of_birth\", \"author\".\"place_of_birth\", \"author\".\"date_of_death\", \"author\".\"place_of_death\", \"a\".\"book_id\""),
		qm.From("\"author\""),
		qm.InnerJoin("\"authorsbooks\" as \"a\" on \"author\".\"author_id\" = \"a\".\"author_id\""),
		qm.WhereIn("\"a\".\"book_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load author")
	}

	var resultSlice []*Author

	var localJoinCols []string
	for results.Next() {
		one := new(Author)
		var localJoinCol string

		err = results.Scan(&one.AuthorID, &one.Fullname, &one.Biography, &one.DateOfBirth, &one.PlaceOfBirth, &one.DateOfDeath, &one.PlaceOfDeath, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for author")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice author")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Authors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorR{}
			}
			foreign.R.Books = append(foreign.R.Books, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.BookID == localJoinCol {
				local.R.Authors = append(local.R.Authors, foreign)
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.Books = append(foreign.R.Books, local)
				break
			}
		}
	}

	return nil
}

// LoadBookpageratings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookL) LoadBookpageratings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBook interface{}, mods queries.Applicator) error {
	var slice []*Book
	var object *Book

	if singular {
		var ok bool
		object, ok = maybeBook.(*Book)
		if !ok {
			object = new(Book)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBook))
			}
		}
	} else {
		s, ok := maybeBook.(*[]*Book)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookR{}
		}
		args = append(args, object.BookID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookID) {
					continue Outer
				}
			}

			args = append(args, obj.BookID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookpageratings`),
		qm.WhereIn(`bookpageratings.book_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookpageratings")
	}

	var resultSlice []*Bookpagerating
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookpageratings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookpageratings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookpageratings")
	}

	if len(bookpageratingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookpageratings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookpageratingR{}
			}
			foreign.R.Book = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BookID, foreign.BookID) {
				local.R.Bookpageratings = append(local.R.Bookpageratings, foreign)
				if foreign.R == nil {
					foreign.R = &bookpageratingR{}
				}
				foreign.R.Book = local
				break
			}
		}
	}

	return nil
}

// LoadBookreviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookL) LoadBookreviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBook interface{}, mods queries.Applicator) error {
	var slice []*Book
	var object *Book

	if singular {
		var ok bool
		object, ok = maybeBook.(*Book)
		if !ok {
			object = new(Book)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBook))
			}
		}
	} else {
		s, ok := maybeBook.(*[]*Book)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookR{}
		}
		args = append(args, object.BookID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookID) {
					continue Outer
				}
			}

			args = append(args, obj.BookID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookreviews`),
		qm.WhereIn(`bookreviews.book_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookreviews")
	}

	var resultSlice []*Bookreview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookreviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookreviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookreviews")
	}

	if len(bookreviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookreviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookreviewR{}
			}
			foreign.R.Book = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BookID, foreign.BookID) {
				local.R.Bookreviews = append(local.R.Bookreviews, foreign)
				if foreign.R == nil {
					foreign.R = &bookreviewR{}
				}
				foreign.R.Book = local
				break
			}
		}
	}

	return nil
}

// LoadResourseListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bookL) LoadResourseListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBook interface{}, mods queries.Applicator) error {
	var slice []*Book
	var object *Book

	if singular {
		var ok bool
		object, ok = maybeBook.(*Book)
		if !ok {
			object = new(Book)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBook))
			}
		}
	} else {
		s, ok := maybeBook.(*[]*Book)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bookR{}
		}
		args = append(args, object.BookID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookR{}
			}

			for _, a := range args {
				if a == obj.BookID {
					continue Outer
				}
			}

			args = append(args, obj.BookID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"listings\".\"listing_id\", \"listings\".\"owner_id\", \"listings\".\"title\", \"listings\".\"price\", \"listings\".\"currency\", \"listings\".\"description\", \"a\".\"book_id\""),
		qm.From("\"listings\""),
		qm.InnerJoin("\"listingsbooks\" as \"a\" on \"listings\".\"listing_id\" = \"a\".\"resourse_id\""),
		qm.WhereIn("\"a\".\"book_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load listings")
	}

	var resultSlice []*Listing

	var localJoinCols []string
	for results.Next() {
		one := new(Listing)
		var localJoinCol string

		err = results.Scan(&one.ListingID, &one.OwnerID, &one.Title, &one.Price, &one.Currency, &one.Description, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for listings")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice listings")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for listings")
	}

	if len(listingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourseListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &listingR{}
			}
			foreign.R.Books = append(foreign.R.Books, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.BookID == localJoinCol {
				local.R.ResourseListings = append(local.R.ResourseListings, foreign)
				if foreign.R == nil {
					foreign.R = &listingR{}
				}
				foreign.R.Books = append(foreign.R.Books, local)
				break
			}
		}
	}

	return nil
}

// AddAuthorsG adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.Authors.
// Sets related.R.Books appropriately.
// Uses the global database handle.
func (o *Book) AddAuthorsG(ctx context.Context, insert bool, related ...*Author) error {
	return o.AddAuthors(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuthors adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.Authors.
// Sets related.R.Books appropriately.
func (o *Book) AddAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"authorsbooks\" (\"book_id\", \"author_id\") values ($1, $2)"
		values := []interface{}{o.BookID, rel.AuthorID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &bookR{
			Authors: related,
		}
	} else {
		o.R.Authors = append(o.R.Authors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorR{
				Books: BookSlice{o},
			}
		} else {
			rel.R.Books = append(rel.R.Books, o)
		}
	}
	return nil
}

// SetAuthorsG removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Books's Authors accordingly.
// Replaces o.R.Authors with related.
// Sets related.R.Books's Authors accordingly.
// Uses the global database handle.
func (o *Book) SetAuthorsG(ctx context.Context, insert bool, related ...*Author) error {
	return o.SetAuthors(ctx, boil.GetContextDB(), insert, related...)
}

// SetAuthors removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Books's Authors accordingly.
// Replaces o.R.Authors with related.
// Sets related.R.Books's Authors accordingly.
func (o *Book) SetAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	query := "delete from \"authorsbooks\" where \"book_id\" = $1"
	values := []interface{}{o.BookID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAuthorsFromBooksSlice(o, related)
	if o.R != nil {
		o.R.Authors = nil
	}

	return o.AddAuthors(ctx, exec, insert, related...)
}

// RemoveAuthorsG relationships from objects passed in.
// Removes related items from R.Authors (uses pointer comparison, removal does not keep order)
// Sets related.R.Books.
// Uses the global database handle.
func (o *Book) RemoveAuthorsG(ctx context.Context, related ...*Author) error {
	return o.RemoveAuthors(ctx, boil.GetContextDB(), related...)
}

// RemoveAuthors relationships from objects passed in.
// Removes related items from R.Authors (uses pointer comparison, removal does not keep order)
// Sets related.R.Books.
func (o *Book) RemoveAuthors(ctx context.Context, exec boil.ContextExecutor, related ...*Author) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"authorsbooks\" where \"book_id\" = $1 and \"author_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.BookID}
	for _, rel := range related {
		values = append(values, rel.AuthorID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAuthorsFromBooksSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Authors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Authors)
			if ln > 1 && i < ln-1 {
				o.R.Authors[i] = o.R.Authors[ln-1]
			}
			o.R.Authors = o.R.Authors[:ln-1]
			break
		}
	}

	return nil
}

func removeAuthorsFromBooksSlice(o *Book, related []*Author) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Books {
			if o.BookID != ri.BookID {
				continue
			}

			ln := len(rel.R.Books)
			if ln > 1 && i < ln-1 {
				rel.R.Books[i] = rel.R.Books[ln-1]
			}
			rel.R.Books = rel.R.Books[:ln-1]
			break
		}
	}
}

// AddBookpageratingsG adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.Bookpageratings.
// Sets related.R.Book appropriately.
// Uses the global database handle.
func (o *Book) AddBookpageratingsG(ctx context.Context, insert bool, related ...*Bookpagerating) error {
	return o.AddBookpageratings(ctx, boil.GetContextDB(), insert, related...)
}

// AddBookpageratings adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.Bookpageratings.
// Sets related.R.Book appropriately.
func (o *Book) AddBookpageratings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookpagerating) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BookID, o.BookID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bookpageratings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"book_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookpageratingPrimaryKeyColumns),
			)
			values := []interface{}{o.BookID, rel.BookRatingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BookID, o.BookID)
		}
	}

	if o.R == nil {
		o.R = &bookR{
			Bookpageratings: related,
		}
	} else {
		o.R.Bookpageratings = append(o.R.Bookpageratings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookpageratingR{
				Book: o,
			}
		} else {
			rel.R.Book = o
		}
	}
	return nil
}

// SetBookpageratingsG removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Book's Bookpageratings accordingly.
// Replaces o.R.Bookpageratings with related.
// Sets related.R.Book's Bookpageratings accordingly.
// Uses the global database handle.
func (o *Book) SetBookpageratingsG(ctx context.Context, insert bool, related ...*Bookpagerating) error {
	return o.SetBookpageratings(ctx, boil.GetContextDB(), insert, related...)
}

// SetBookpageratings removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Book's Bookpageratings accordingly.
// Replaces o.R.Bookpageratings with related.
// Sets related.R.Book's Bookpageratings accordingly.
func (o *Book) SetBookpageratings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookpagerating) error {
	query := "update \"bookpageratings\" set \"book_id\" = null where \"book_id\" = $1"
	values := []interface{}{o.BookID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Bookpageratings {
			queries.SetScanner(&rel.BookID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Book = nil
		}
		o.R.Bookpageratings = nil
	}

	return o.AddBookpageratings(ctx, exec, insert, related...)
}

// RemoveBookpageratingsG relationships from objects passed in.
// Removes related items from R.Bookpageratings (uses pointer comparison, removal does not keep order)
// Sets related.R.Book.
// Uses the global database handle.
func (o *Book) RemoveBookpageratingsG(ctx context.Context, related ...*Bookpagerating) error {
	return o.RemoveBookpageratings(ctx, boil.GetContextDB(), related...)
}

// RemoveBookpageratings relationships from objects passed in.
// Removes related items from R.Bookpageratings (uses pointer comparison, removal does not keep order)
// Sets related.R.Book.
func (o *Book) RemoveBookpageratings(ctx context.Context, exec boil.ContextExecutor, related ...*Bookpagerating) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BookID, nil)
		if rel.R != nil {
			rel.R.Book = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("book_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Bookpageratings {
			if rel != ri {
				continue
			}

			ln := len(o.R.Bookpageratings)
			if ln > 1 && i < ln-1 {
				o.R.Bookpageratings[i] = o.R.Bookpageratings[ln-1]
			}
			o.R.Bookpageratings = o.R.Bookpageratings[:ln-1]
			break
		}
	}

	return nil
}

// AddBookreviewsG adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.Bookreviews.
// Sets related.R.Book appropriately.
// Uses the global database handle.
func (o *Book) AddBookreviewsG(ctx context.Context, insert bool, related ...*Bookreview) error {
	return o.AddBookreviews(ctx, boil.GetContextDB(), insert, related...)
}

// AddBookreviews adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.Bookreviews.
// Sets related.R.Book appropriately.
func (o *Book) AddBookreviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookreview) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BookID, o.BookID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bookreviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"book_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookreviewPrimaryKeyColumns),
			)
			values := []interface{}{o.BookID, rel.BookReviewsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BookID, o.BookID)
		}
	}

	if o.R == nil {
		o.R = &bookR{
			Bookreviews: related,
		}
	} else {
		o.R.Bookreviews = append(o.R.Bookreviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookreviewR{
				Book: o,
			}
		} else {
			rel.R.Book = o
		}
	}
	return nil
}

// SetBookreviewsG removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Book's Bookreviews accordingly.
// Replaces o.R.Bookreviews with related.
// Sets related.R.Book's Bookreviews accordingly.
// Uses the global database handle.
func (o *Book) SetBookreviewsG(ctx context.Context, insert bool, related ...*Bookreview) error {
	return o.SetBookreviews(ctx, boil.GetContextDB(), insert, related...)
}

// SetBookreviews removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Book's Bookreviews accordingly.
// Replaces o.R.Bookreviews with related.
// Sets related.R.Book's Bookreviews accordingly.
func (o *Book) SetBookreviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookreview) error {
	query := "update \"bookreviews\" set \"book_id\" = null where \"book_id\" = $1"
	values := []interface{}{o.BookID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Bookreviews {
			queries.SetScanner(&rel.BookID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Book = nil
		}
		o.R.Bookreviews = nil
	}

	return o.AddBookreviews(ctx, exec, insert, related...)
}

// RemoveBookreviewsG relationships from objects passed in.
// Removes related items from R.Bookreviews (uses pointer comparison, removal does not keep order)
// Sets related.R.Book.
// Uses the global database handle.
func (o *Book) RemoveBookreviewsG(ctx context.Context, related ...*Bookreview) error {
	return o.RemoveBookreviews(ctx, boil.GetContextDB(), related...)
}

// RemoveBookreviews relationships from objects passed in.
// Removes related items from R.Bookreviews (uses pointer comparison, removal does not keep order)
// Sets related.R.Book.
func (o *Book) RemoveBookreviews(ctx context.Context, exec boil.ContextExecutor, related ...*Bookreview) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BookID, nil)
		if rel.R != nil {
			rel.R.Book = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("book_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Bookreviews {
			if rel != ri {
				continue
			}

			ln := len(o.R.Bookreviews)
			if ln > 1 && i < ln-1 {
				o.R.Bookreviews[i] = o.R.Bookreviews[ln-1]
			}
			o.R.Bookreviews = o.R.Bookreviews[:ln-1]
			break
		}
	}

	return nil
}

// AddResourseListingsG adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.ResourseListings.
// Sets related.R.Books appropriately.
// Uses the global database handle.
func (o *Book) AddResourseListingsG(ctx context.Context, insert bool, related ...*Listing) error {
	return o.AddResourseListings(ctx, boil.GetContextDB(), insert, related...)
}

// AddResourseListings adds the given related objects to the existing relationships
// of the book, optionally inserting them as new records.
// Appends related to o.R.ResourseListings.
// Sets related.R.Books appropriately.
func (o *Book) AddResourseListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Listing) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"listingsbooks\" (\"book_id\", \"resourse_id\") values ($1, $2)"
		values := []interface{}{o.BookID, rel.ListingID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &bookR{
			ResourseListings: related,
		}
	} else {
		o.R.ResourseListings = append(o.R.ResourseListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &listingR{
				Books: BookSlice{o},
			}
		} else {
			rel.R.Books = append(rel.R.Books, o)
		}
	}
	return nil
}

// SetResourseListingsG removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Books's ResourseListings accordingly.
// Replaces o.R.ResourseListings with related.
// Sets related.R.Books's ResourseListings accordingly.
// Uses the global database handle.
func (o *Book) SetResourseListingsG(ctx context.Context, insert bool, related ...*Listing) error {
	return o.SetResourseListings(ctx, boil.GetContextDB(), insert, related...)
}

// SetResourseListings removes all previously related items of the
// book replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Books's ResourseListings accordingly.
// Replaces o.R.ResourseListings with related.
// Sets related.R.Books's ResourseListings accordingly.
func (o *Book) SetResourseListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Listing) error {
	query := "delete from \"listingsbooks\" where \"book_id\" = $1"
	values := []interface{}{o.BookID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeResourseListingsFromBooksSlice(o, related)
	if o.R != nil {
		o.R.ResourseListings = nil
	}

	return o.AddResourseListings(ctx, exec, insert, related...)
}

// RemoveResourseListingsG relationships from objects passed in.
// Removes related items from R.ResourseListings (uses pointer comparison, removal does not keep order)
// Sets related.R.Books.
// Uses the global database handle.
func (o *Book) RemoveResourseListingsG(ctx context.Context, related ...*Listing) error {
	return o.RemoveResourseListings(ctx, boil.GetContextDB(), related...)
}

// RemoveResourseListings relationships from objects passed in.
// Removes related items from R.ResourseListings (uses pointer comparison, removal does not keep order)
// Sets related.R.Books.
func (o *Book) RemoveResourseListings(ctx context.Context, exec boil.ContextExecutor, related ...*Listing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"listingsbooks\" where \"book_id\" = $1 and \"resourse_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.BookID}
	for _, rel := range related {
		values = append(values, rel.ListingID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeResourseListingsFromBooksSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourseListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourseListings)
			if ln > 1 && i < ln-1 {
				o.R.ResourseListings[i] = o.R.ResourseListings[ln-1]
			}
			o.R.ResourseListings = o.R.ResourseListings[:ln-1]
			break
		}
	}

	return nil
}

func removeResourseListingsFromBooksSlice(o *Book, related []*Listing) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Books {
			if o.BookID != ri.BookID {
				continue
			}

			ln := len(rel.R.Books)
			if ln > 1 && i < ln-1 {
				rel.R.Books[i] = rel.R.Books[ln-1]
			}
			rel.R.Books = rel.R.Books[:ln-1]
			break
		}
	}
}

// Books retrieves all the records using an executor.
func Books(mods ...qm.QueryMod) bookQuery {
	mods = append(mods, qm.From("\"books\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books\".*"})
	}

	return bookQuery{q}
}

// FindBookG retrieves a single record by ID.
func FindBookG(ctx context.Context, bookID string, selectCols ...string) (*Book, error) {
	return FindBook(ctx, boil.GetContextDB(), bookID, selectCols...)
}

// FindBook retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBook(ctx context.Context, exec boil.ContextExecutor, bookID string, selectCols ...string) (*Book, error) {
	bookObj := &Book{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books\" where \"book_id\"=$1", sel,
	)

	q := queries.Raw(query, bookID)

	err := q.Bind(ctx, exec, bookObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from books")
	}

	if err = bookObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookObj, err
	}

	return bookObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Book) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Book) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no books provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookInsertCacheMut.RLock()
	cache, cached := bookInsertCache[key]
	bookInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookAllColumns,
			bookColumnsWithDefault,
			bookColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookType, bookMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookType, bookMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into books")
	}

	if !cached {
		bookInsertCacheMut.Lock()
		bookInsertCache[key] = cache
		bookInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Book record using the global executor.
// See Update for more documentation.
func (o *Book) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Book.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Book) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookUpdateCacheMut.RLock()
	cache, cached := bookUpdateCache[key]
	bookUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookAllColumns,
			bookPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update books, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookType, bookMapping, append(wl, bookPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update books row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for books")
	}

	if !cached {
		bookUpdateCacheMut.Lock()
		bookUpdateCache[key] = cache
		bookUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for books")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for books")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in book slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all book")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Book) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Book) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no books provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookUpsertCacheMut.RLock()
	cache, cached := bookUpsertCache[key]
	bookUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookAllColumns,
			bookColumnsWithDefault,
			bookColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookAllColumns,
			bookPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert books, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookPrimaryKeyColumns))
			copy(conflict, bookPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"books\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookType, bookMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookType, bookMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert books")
	}

	if !cached {
		bookUpsertCacheMut.Lock()
		bookUpsertCache[key] = cache
		bookUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Book record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Book) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Book record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Book) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Book provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookPrimaryKeyMapping)
	sql := "DELETE FROM \"books\" WHERE \"book_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from books")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for books")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q bookQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q bookQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no bookQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from books")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for books")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from book slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for books")
	}

	if len(bookAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Book) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Book provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Book) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBook(ctx, exec, o.BookID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty BookSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books\".* FROM \"books\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in BookSlice")
	}

	*o = slice

	return nil
}

// BookExistsG checks if the Book row exists.
func BookExistsG(ctx context.Context, bookID string) (bool, error) {
	return BookExists(ctx, boil.GetContextDB(), bookID)
}

// BookExists checks if the Book row exists.
func BookExists(ctx context.Context, exec boil.ContextExecutor, bookID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books\" where \"book_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bookID)
	}
	row := exec.QueryRowContext(ctx, sql, bookID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if books exists")
	}

	return exists, nil
}

// Exists checks if the Book row exists.
func (o *Book) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookExists(ctx, exec, o.BookID)
}
