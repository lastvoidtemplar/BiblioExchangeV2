// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Listing is an object representing the database table.
type Listing struct {
	ListingID   string      `boil:"listing_id" json:"listing_id" toml:"listing_id" yaml:"listing_id"`
	OwnerID     string      `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Price       null.Int    `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Currency    null.String `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *listingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L listingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ListingColumns = struct {
	ListingID   string
	OwnerID     string
	Title       string
	Price       string
	Currency    string
	Description string
}{
	ListingID:   "listing_id",
	OwnerID:     "owner_id",
	Title:       "title",
	Price:       "price",
	Currency:    "currency",
	Description: "description",
}

var ListingTableColumns = struct {
	ListingID   string
	OwnerID     string
	Title       string
	Price       string
	Currency    string
	Description string
}{
	ListingID:   "listings.listing_id",
	OwnerID:     "listings.owner_id",
	Title:       "listings.title",
	Price:       "listings.price",
	Currency:    "listings.currency",
	Description: "listings.description",
}

// Generated where

var ListingWhere = struct {
	ListingID   whereHelperstring
	OwnerID     whereHelperstring
	Title       whereHelperstring
	Price       whereHelpernull_Int
	Currency    whereHelpernull_String
	Description whereHelpernull_String
}{
	ListingID:   whereHelperstring{field: "\"listings\".\"listing_id\""},
	OwnerID:     whereHelperstring{field: "\"listings\".\"owner_id\""},
	Title:       whereHelperstring{field: "\"listings\".\"title\""},
	Price:       whereHelpernull_Int{field: "\"listings\".\"price\""},
	Currency:    whereHelpernull_String{field: "\"listings\".\"currency\""},
	Description: whereHelpernull_String{field: "\"listings\".\"description\""},
}

// ListingRels is where relationship names are stored.
var ListingRels = struct {
	Books        string
	Listingsurls string
}{
	Books:        "Books",
	Listingsurls: "Listingsurls",
}

// listingR is where relationships are stored.
type listingR struct {
	Books        BookSlice        `boil:"Books" json:"Books" toml:"Books" yaml:"Books"`
	Listingsurls ListingsurlSlice `boil:"Listingsurls" json:"Listingsurls" toml:"Listingsurls" yaml:"Listingsurls"`
}

// NewStruct creates a new relationship struct
func (*listingR) NewStruct() *listingR {
	return &listingR{}
}

func (r *listingR) GetBooks() BookSlice {
	if r == nil {
		return nil
	}
	return r.Books
}

func (r *listingR) GetListingsurls() ListingsurlSlice {
	if r == nil {
		return nil
	}
	return r.Listingsurls
}

// listingL is where Load methods for each relationship are stored.
type listingL struct{}

var (
	listingAllColumns            = []string{"listing_id", "owner_id", "title", "price", "currency", "description"}
	listingColumnsWithoutDefault = []string{"owner_id", "title"}
	listingColumnsWithDefault    = []string{"listing_id", "price", "currency", "description"}
	listingPrimaryKeyColumns     = []string{"listing_id"}
	listingGeneratedColumns      = []string{}
)

type (
	// ListingSlice is an alias for a slice of pointers to Listing.
	// This should almost always be used instead of []Listing.
	ListingSlice []*Listing
	// ListingHook is the signature for custom Listing hook methods
	ListingHook func(context.Context, boil.ContextExecutor, *Listing) error

	listingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	listingType                 = reflect.TypeOf(&Listing{})
	listingMapping              = queries.MakeStructMapping(listingType)
	listingPrimaryKeyMapping, _ = queries.BindMapping(listingType, listingMapping, listingPrimaryKeyColumns)
	listingInsertCacheMut       sync.RWMutex
	listingInsertCache          = make(map[string]insertCache)
	listingUpdateCacheMut       sync.RWMutex
	listingUpdateCache          = make(map[string]updateCache)
	listingUpsertCacheMut       sync.RWMutex
	listingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var listingAfterSelectHooks []ListingHook

var listingBeforeInsertHooks []ListingHook
var listingAfterInsertHooks []ListingHook

var listingBeforeUpdateHooks []ListingHook
var listingAfterUpdateHooks []ListingHook

var listingBeforeDeleteHooks []ListingHook
var listingAfterDeleteHooks []ListingHook

var listingBeforeUpsertHooks []ListingHook
var listingAfterUpsertHooks []ListingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Listing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Listing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Listing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Listing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Listing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Listing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Listing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Listing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Listing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddListingHook registers your hook function for all future operations.
func AddListingHook(hookPoint boil.HookPoint, listingHook ListingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		listingAfterSelectHooks = append(listingAfterSelectHooks, listingHook)
	case boil.BeforeInsertHook:
		listingBeforeInsertHooks = append(listingBeforeInsertHooks, listingHook)
	case boil.AfterInsertHook:
		listingAfterInsertHooks = append(listingAfterInsertHooks, listingHook)
	case boil.BeforeUpdateHook:
		listingBeforeUpdateHooks = append(listingBeforeUpdateHooks, listingHook)
	case boil.AfterUpdateHook:
		listingAfterUpdateHooks = append(listingAfterUpdateHooks, listingHook)
	case boil.BeforeDeleteHook:
		listingBeforeDeleteHooks = append(listingBeforeDeleteHooks, listingHook)
	case boil.AfterDeleteHook:
		listingAfterDeleteHooks = append(listingAfterDeleteHooks, listingHook)
	case boil.BeforeUpsertHook:
		listingBeforeUpsertHooks = append(listingBeforeUpsertHooks, listingHook)
	case boil.AfterUpsertHook:
		listingAfterUpsertHooks = append(listingAfterUpsertHooks, listingHook)
	}
}

// OneG returns a single listing record from the query using the global executor.
func (q listingQuery) OneG(ctx context.Context) (*Listing, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single listing record from the query.
func (q listingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Listing, error) {
	o := &Listing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for listings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Listing records from the query using the global executor.
func (q listingQuery) AllG(ctx context.Context) (ListingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Listing records from the query.
func (q listingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ListingSlice, error) {
	var o []*Listing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Listing slice")
	}

	if len(listingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Listing records in the query using the global executor
func (q listingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Listing records in the query.
func (q listingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count listings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q listingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q listingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if listings exists")
	}

	return count > 0, nil
}

// Books retrieves all the book's Books with an executor.
func (o *Listing) Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"listingsbooks\" on \"books\".\"book_id\" = \"listingsbooks\".\"book_id\""),
		qm.Where("\"listingsbooks\".\"resourse_id\"=?", o.ListingID),
	)

	return Books(queryMods...)
}

// Listingsurls retrieves all the listingsurl's Listingsurls with an executor.
func (o *Listing) Listingsurls(mods ...qm.QueryMod) listingsurlQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"listingsurls\".\"listing_id\"=?", o.ListingID),
	)

	return Listingsurls(queryMods...)
}

// LoadBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (listingL) LoadBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeListing interface{}, mods queries.Applicator) error {
	var slice []*Listing
	var object *Listing

	if singular {
		var ok bool
		object, ok = maybeListing.(*Listing)
		if !ok {
			object = new(Listing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeListing))
			}
		}
	} else {
		s, ok := maybeListing.(*[]*Listing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &listingR{}
		}
		args = append(args, object.ListingID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listingR{}
			}

			for _, a := range args {
				if a == obj.ListingID {
					continue Outer
				}
			}

			args = append(args, obj.ListingID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"books\".\"book_id\", \"books\".\"isbn\", \"books\".\"title\", \"books\".\"date_of_publication\", \"books\".\"plot\", \"books\".\"genre\", \"a\".\"resourse_id\""),
		qm.From("\"books\""),
		qm.InnerJoin("\"listingsbooks\" as \"a\" on \"books\".\"book_id\" = \"a\".\"book_id\""),
		qm.WhereIn("\"a\".\"resourse_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load books")
	}

	var resultSlice []*Book

	var localJoinCols []string
	for results.Next() {
		one := new(Book)
		var localJoinCol string

		err = results.Scan(&one.BookID, &one.Isbn, &one.Title, &one.DateOfPublication, &one.Plot, &one.Genre, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for books")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice books")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.ResourseListings = append(foreign.R.ResourseListings, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ListingID == localJoinCol {
				local.R.Books = append(local.R.Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.ResourseListings = append(foreign.R.ResourseListings, local)
				break
			}
		}
	}

	return nil
}

// LoadListingsurls allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (listingL) LoadListingsurls(ctx context.Context, e boil.ContextExecutor, singular bool, maybeListing interface{}, mods queries.Applicator) error {
	var slice []*Listing
	var object *Listing

	if singular {
		var ok bool
		object, ok = maybeListing.(*Listing)
		if !ok {
			object = new(Listing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeListing))
			}
		}
	} else {
		s, ok := maybeListing.(*[]*Listing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &listingR{}
		}
		args = append(args, object.ListingID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ListingID) {
					continue Outer
				}
			}

			args = append(args, obj.ListingID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`listingsurls`),
		qm.WhereIn(`listingsurls.listing_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load listingsurls")
	}

	var resultSlice []*Listingsurl
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice listingsurls")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on listingsurls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for listingsurls")
	}

	if len(listingsurlAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Listingsurls = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &listingsurlR{}
			}
			foreign.R.Listing = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ListingID, foreign.ListingID) {
				local.R.Listingsurls = append(local.R.Listingsurls, foreign)
				if foreign.R == nil {
					foreign.R = &listingsurlR{}
				}
				foreign.R.Listing = local
				break
			}
		}
	}

	return nil
}

// AddBooksG adds the given related objects to the existing relationships
// of the listing, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.ResourseListings appropriately.
// Uses the global database handle.
func (o *Listing) AddBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.AddBooks(ctx, boil.GetContextDB(), insert, related...)
}

// AddBooks adds the given related objects to the existing relationships
// of the listing, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.ResourseListings appropriately.
func (o *Listing) AddBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"listingsbooks\" (\"resourse_id\", \"book_id\") values ($1, $2)"
		values := []interface{}{o.ListingID, rel.BookID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &listingR{
			Books: related,
		}
	} else {
		o.R.Books = append(o.R.Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				ResourseListings: ListingSlice{o},
			}
		} else {
			rel.R.ResourseListings = append(rel.R.ResourseListings, o)
		}
	}
	return nil
}

// SetBooksG removes all previously related items of the
// listing replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ResourseListings's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.ResourseListings's Books accordingly.
// Uses the global database handle.
func (o *Listing) SetBooksG(ctx context.Context, insert bool, related ...*Book) error {
	return o.SetBooks(ctx, boil.GetContextDB(), insert, related...)
}

// SetBooks removes all previously related items of the
// listing replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ResourseListings's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.ResourseListings's Books accordingly.
func (o *Listing) SetBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "delete from \"listingsbooks\" where \"resourse_id\" = $1"
	values := []interface{}{o.ListingID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeBooksFromResourseListingsSlice(o, related)
	if o.R != nil {
		o.R.Books = nil
	}

	return o.AddBooks(ctx, exec, insert, related...)
}

// RemoveBooksG relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.ResourseListings.
// Uses the global database handle.
func (o *Listing) RemoveBooksG(ctx context.Context, related ...*Book) error {
	return o.RemoveBooks(ctx, boil.GetContextDB(), related...)
}

// RemoveBooks relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.ResourseListings.
func (o *Listing) RemoveBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"listingsbooks\" where \"resourse_id\" = $1 and \"book_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ListingID}
	for _, rel := range related {
		values = append(values, rel.BookID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeBooksFromResourseListingsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Books)
			if ln > 1 && i < ln-1 {
				o.R.Books[i] = o.R.Books[ln-1]
			}
			o.R.Books = o.R.Books[:ln-1]
			break
		}
	}

	return nil
}

func removeBooksFromResourseListingsSlice(o *Listing, related []*Book) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ResourseListings {
			if o.ListingID != ri.ListingID {
				continue
			}

			ln := len(rel.R.ResourseListings)
			if ln > 1 && i < ln-1 {
				rel.R.ResourseListings[i] = rel.R.ResourseListings[ln-1]
			}
			rel.R.ResourseListings = rel.R.ResourseListings[:ln-1]
			break
		}
	}
}

// AddListingsurlsG adds the given related objects to the existing relationships
// of the listing, optionally inserting them as new records.
// Appends related to o.R.Listingsurls.
// Sets related.R.Listing appropriately.
// Uses the global database handle.
func (o *Listing) AddListingsurlsG(ctx context.Context, insert bool, related ...*Listingsurl) error {
	return o.AddListingsurls(ctx, boil.GetContextDB(), insert, related...)
}

// AddListingsurls adds the given related objects to the existing relationships
// of the listing, optionally inserting them as new records.
// Appends related to o.R.Listingsurls.
// Sets related.R.Listing appropriately.
func (o *Listing) AddListingsurls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Listingsurl) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ListingID, o.ListingID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"listingsurls\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"listing_id"}),
				strmangle.WhereClause("\"", "\"", 2, listingsurlPrimaryKeyColumns),
			)
			values := []interface{}{o.ListingID, rel.ResourseID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ListingID, o.ListingID)
		}
	}

	if o.R == nil {
		o.R = &listingR{
			Listingsurls: related,
		}
	} else {
		o.R.Listingsurls = append(o.R.Listingsurls, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &listingsurlR{
				Listing: o,
			}
		} else {
			rel.R.Listing = o
		}
	}
	return nil
}

// SetListingsurlsG removes all previously related items of the
// listing replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Listing's Listingsurls accordingly.
// Replaces o.R.Listingsurls with related.
// Sets related.R.Listing's Listingsurls accordingly.
// Uses the global database handle.
func (o *Listing) SetListingsurlsG(ctx context.Context, insert bool, related ...*Listingsurl) error {
	return o.SetListingsurls(ctx, boil.GetContextDB(), insert, related...)
}

// SetListingsurls removes all previously related items of the
// listing replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Listing's Listingsurls accordingly.
// Replaces o.R.Listingsurls with related.
// Sets related.R.Listing's Listingsurls accordingly.
func (o *Listing) SetListingsurls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Listingsurl) error {
	query := "update \"listingsurls\" set \"listing_id\" = null where \"listing_id\" = $1"
	values := []interface{}{o.ListingID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Listingsurls {
			queries.SetScanner(&rel.ListingID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Listing = nil
		}
		o.R.Listingsurls = nil
	}

	return o.AddListingsurls(ctx, exec, insert, related...)
}

// RemoveListingsurlsG relationships from objects passed in.
// Removes related items from R.Listingsurls (uses pointer comparison, removal does not keep order)
// Sets related.R.Listing.
// Uses the global database handle.
func (o *Listing) RemoveListingsurlsG(ctx context.Context, related ...*Listingsurl) error {
	return o.RemoveListingsurls(ctx, boil.GetContextDB(), related...)
}

// RemoveListingsurls relationships from objects passed in.
// Removes related items from R.Listingsurls (uses pointer comparison, removal does not keep order)
// Sets related.R.Listing.
func (o *Listing) RemoveListingsurls(ctx context.Context, exec boil.ContextExecutor, related ...*Listingsurl) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ListingID, nil)
		if rel.R != nil {
			rel.R.Listing = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("listing_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Listingsurls {
			if rel != ri {
				continue
			}

			ln := len(o.R.Listingsurls)
			if ln > 1 && i < ln-1 {
				o.R.Listingsurls[i] = o.R.Listingsurls[ln-1]
			}
			o.R.Listingsurls = o.R.Listingsurls[:ln-1]
			break
		}
	}

	return nil
}

// Listings retrieves all the records using an executor.
func Listings(mods ...qm.QueryMod) listingQuery {
	mods = append(mods, qm.From("\"listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"listings\".*"})
	}

	return listingQuery{q}
}

// FindListingG retrieves a single record by ID.
func FindListingG(ctx context.Context, listingID string, selectCols ...string) (*Listing, error) {
	return FindListing(ctx, boil.GetContextDB(), listingID, selectCols...)
}

// FindListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindListing(ctx context.Context, exec boil.ContextExecutor, listingID string, selectCols ...string) (*Listing, error) {
	listingObj := &Listing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"listings\" where \"listing_id\"=$1", sel,
	)

	q := queries.Raw(query, listingID)

	err := q.Bind(ctx, exec, listingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from listings")
	}

	if err = listingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return listingObj, err
	}

	return listingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Listing) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Listing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no listings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	listingInsertCacheMut.RLock()
	cache, cached := listingInsertCache[key]
	listingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			listingAllColumns,
			listingColumnsWithDefault,
			listingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(listingType, listingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(listingType, listingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into listings")
	}

	if !cached {
		listingInsertCacheMut.Lock()
		listingInsertCache[key] = cache
		listingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Listing record using the global executor.
// See Update for more documentation.
func (o *Listing) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Listing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Listing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	listingUpdateCacheMut.RLock()
	cache, cached := listingUpdateCache[key]
	listingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			listingAllColumns,
			listingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, listingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(listingType, listingMapping, append(wl, listingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for listings")
	}

	if !cached {
		listingUpdateCacheMut.Lock()
		listingUpdateCache[key] = cache
		listingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q listingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q listingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for listings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ListingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ListingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, listingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in listing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all listing")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Listing) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Listing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no listings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	listingUpsertCacheMut.RLock()
	cache, cached := listingUpsertCache[key]
	listingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			listingAllColumns,
			listingColumnsWithDefault,
			listingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			listingAllColumns,
			listingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert listings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(listingPrimaryKeyColumns))
			copy(conflict, listingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"listings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(listingType, listingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(listingType, listingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert listings")
	}

	if !cached {
		listingUpsertCacheMut.Lock()
		listingUpsertCache[key] = cache
		listingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Listing record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Listing) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Listing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Listing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Listing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), listingPrimaryKeyMapping)
	sql := "DELETE FROM \"listings\" WHERE \"listing_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for listings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q listingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q listingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no listingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for listings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ListingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ListingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(listingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from listing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for listings")
	}

	if len(listingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Listing) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Listing provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Listing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindListing(ctx, exec, o.ListingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty ListingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"listings\".* FROM \"listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ListingSlice")
	}

	*o = slice

	return nil
}

// ListingExistsG checks if the Listing row exists.
func ListingExistsG(ctx context.Context, listingID string) (bool, error) {
	return ListingExists(ctx, boil.GetContextDB(), listingID)
}

// ListingExists checks if the Listing row exists.
func ListingExists(ctx context.Context, exec boil.ContextExecutor, listingID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"listings\" where \"listing_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, listingID)
	}
	row := exec.QueryRowContext(ctx, sql, listingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if listings exists")
	}

	return exists, nil
}

// Exists checks if the Listing row exists.
func (o *Listing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ListingExists(ctx, exec, o.ListingID)
}
