// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Listingsurl is an object representing the database table.
type Listingsurl struct {
	ResourseID   string      `boil:"resourse_id" json:"resourse_id" toml:"resourse_id" yaml:"resourse_id"`
	ListingID    null.String `boil:"listing_id" json:"listing_id,omitempty" toml:"listing_id" yaml:"listing_id,omitempty"`
	ResourseURL  string      `boil:"resourse_url" json:"resourse_url" toml:"resourse_url" yaml:"resourse_url"`
	UploadStatus null.Bool   `boil:"upload_status" json:"upload_status,omitempty" toml:"upload_status" yaml:"upload_status,omitempty"`

	R *listingsurlR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L listingsurlL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ListingsurlColumns = struct {
	ResourseID   string
	ListingID    string
	ResourseURL  string
	UploadStatus string
}{
	ResourseID:   "resourse_id",
	ListingID:    "listing_id",
	ResourseURL:  "resourse_url",
	UploadStatus: "upload_status",
}

var ListingsurlTableColumns = struct {
	ResourseID   string
	ListingID    string
	ResourseURL  string
	UploadStatus string
}{
	ResourseID:   "listingsurls.resourse_id",
	ListingID:    "listingsurls.listing_id",
	ResourseURL:  "listingsurls.resourse_url",
	UploadStatus: "listingsurls.upload_status",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ListingsurlWhere = struct {
	ResourseID   whereHelperstring
	ListingID    whereHelpernull_String
	ResourseURL  whereHelperstring
	UploadStatus whereHelpernull_Bool
}{
	ResourseID:   whereHelperstring{field: "\"listingsurls\".\"resourse_id\""},
	ListingID:    whereHelpernull_String{field: "\"listingsurls\".\"listing_id\""},
	ResourseURL:  whereHelperstring{field: "\"listingsurls\".\"resourse_url\""},
	UploadStatus: whereHelpernull_Bool{field: "\"listingsurls\".\"upload_status\""},
}

// ListingsurlRels is where relationship names are stored.
var ListingsurlRels = struct {
	Listing string
}{
	Listing: "Listing",
}

// listingsurlR is where relationships are stored.
type listingsurlR struct {
	Listing *Listing `boil:"Listing" json:"Listing" toml:"Listing" yaml:"Listing"`
}

// NewStruct creates a new relationship struct
func (*listingsurlR) NewStruct() *listingsurlR {
	return &listingsurlR{}
}

func (r *listingsurlR) GetListing() *Listing {
	if r == nil {
		return nil
	}
	return r.Listing
}

// listingsurlL is where Load methods for each relationship are stored.
type listingsurlL struct{}

var (
	listingsurlAllColumns            = []string{"resourse_id", "listing_id", "resourse_url", "upload_status"}
	listingsurlColumnsWithoutDefault = []string{"resourse_url"}
	listingsurlColumnsWithDefault    = []string{"resourse_id", "listing_id", "upload_status"}
	listingsurlPrimaryKeyColumns     = []string{"resourse_id"}
	listingsurlGeneratedColumns      = []string{}
)

type (
	// ListingsurlSlice is an alias for a slice of pointers to Listingsurl.
	// This should almost always be used instead of []Listingsurl.
	ListingsurlSlice []*Listingsurl
	// ListingsurlHook is the signature for custom Listingsurl hook methods
	ListingsurlHook func(context.Context, boil.ContextExecutor, *Listingsurl) error

	listingsurlQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	listingsurlType                 = reflect.TypeOf(&Listingsurl{})
	listingsurlMapping              = queries.MakeStructMapping(listingsurlType)
	listingsurlPrimaryKeyMapping, _ = queries.BindMapping(listingsurlType, listingsurlMapping, listingsurlPrimaryKeyColumns)
	listingsurlInsertCacheMut       sync.RWMutex
	listingsurlInsertCache          = make(map[string]insertCache)
	listingsurlUpdateCacheMut       sync.RWMutex
	listingsurlUpdateCache          = make(map[string]updateCache)
	listingsurlUpsertCacheMut       sync.RWMutex
	listingsurlUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var listingsurlAfterSelectHooks []ListingsurlHook

var listingsurlBeforeInsertHooks []ListingsurlHook
var listingsurlAfterInsertHooks []ListingsurlHook

var listingsurlBeforeUpdateHooks []ListingsurlHook
var listingsurlAfterUpdateHooks []ListingsurlHook

var listingsurlBeforeDeleteHooks []ListingsurlHook
var listingsurlAfterDeleteHooks []ListingsurlHook

var listingsurlBeforeUpsertHooks []ListingsurlHook
var listingsurlAfterUpsertHooks []ListingsurlHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Listingsurl) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Listingsurl) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Listingsurl) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Listingsurl) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Listingsurl) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Listingsurl) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Listingsurl) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Listingsurl) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Listingsurl) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listingsurlAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddListingsurlHook registers your hook function for all future operations.
func AddListingsurlHook(hookPoint boil.HookPoint, listingsurlHook ListingsurlHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		listingsurlAfterSelectHooks = append(listingsurlAfterSelectHooks, listingsurlHook)
	case boil.BeforeInsertHook:
		listingsurlBeforeInsertHooks = append(listingsurlBeforeInsertHooks, listingsurlHook)
	case boil.AfterInsertHook:
		listingsurlAfterInsertHooks = append(listingsurlAfterInsertHooks, listingsurlHook)
	case boil.BeforeUpdateHook:
		listingsurlBeforeUpdateHooks = append(listingsurlBeforeUpdateHooks, listingsurlHook)
	case boil.AfterUpdateHook:
		listingsurlAfterUpdateHooks = append(listingsurlAfterUpdateHooks, listingsurlHook)
	case boil.BeforeDeleteHook:
		listingsurlBeforeDeleteHooks = append(listingsurlBeforeDeleteHooks, listingsurlHook)
	case boil.AfterDeleteHook:
		listingsurlAfterDeleteHooks = append(listingsurlAfterDeleteHooks, listingsurlHook)
	case boil.BeforeUpsertHook:
		listingsurlBeforeUpsertHooks = append(listingsurlBeforeUpsertHooks, listingsurlHook)
	case boil.AfterUpsertHook:
		listingsurlAfterUpsertHooks = append(listingsurlAfterUpsertHooks, listingsurlHook)
	}
}

// OneG returns a single listingsurl record from the query using the global executor.
func (q listingsurlQuery) OneG(ctx context.Context) (*Listingsurl, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single listingsurl record from the query.
func (q listingsurlQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Listingsurl, error) {
	o := &Listingsurl{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for listingsurls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Listingsurl records from the query using the global executor.
func (q listingsurlQuery) AllG(ctx context.Context) (ListingsurlSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Listingsurl records from the query.
func (q listingsurlQuery) All(ctx context.Context, exec boil.ContextExecutor) (ListingsurlSlice, error) {
	var o []*Listingsurl

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Listingsurl slice")
	}

	if len(listingsurlAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Listingsurl records in the query using the global executor
func (q listingsurlQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Listingsurl records in the query.
func (q listingsurlQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count listingsurls rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q listingsurlQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q listingsurlQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if listingsurls exists")
	}

	return count > 0, nil
}

// Listing pointed to by the foreign key.
func (o *Listingsurl) Listing(mods ...qm.QueryMod) listingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"listing_id\" = ?", o.ListingID),
	}

	queryMods = append(queryMods, mods...)

	return Listings(queryMods...)
}

// LoadListing allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (listingsurlL) LoadListing(ctx context.Context, e boil.ContextExecutor, singular bool, maybeListingsurl interface{}, mods queries.Applicator) error {
	var slice []*Listingsurl
	var object *Listingsurl

	if singular {
		var ok bool
		object, ok = maybeListingsurl.(*Listingsurl)
		if !ok {
			object = new(Listingsurl)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeListingsurl)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeListingsurl))
			}
		}
	} else {
		s, ok := maybeListingsurl.(*[]*Listingsurl)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeListingsurl)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeListingsurl))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &listingsurlR{}
		}
		if !queries.IsNil(object.ListingID) {
			args = append(args, object.ListingID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listingsurlR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ListingID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ListingID) {
				args = append(args, obj.ListingID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`listings`),
		qm.WhereIn(`listings.listing_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Listing")
	}

	var resultSlice []*Listing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Listing")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for listings")
	}

	if len(listingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Listing = foreign
		if foreign.R == nil {
			foreign.R = &listingR{}
		}
		foreign.R.Listingsurls = append(foreign.R.Listingsurls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ListingID, foreign.ListingID) {
				local.R.Listing = foreign
				if foreign.R == nil {
					foreign.R = &listingR{}
				}
				foreign.R.Listingsurls = append(foreign.R.Listingsurls, local)
				break
			}
		}
	}

	return nil
}

// SetListingG of the listingsurl to the related item.
// Sets o.R.Listing to related.
// Adds o to related.R.Listingsurls.
// Uses the global database handle.
func (o *Listingsurl) SetListingG(ctx context.Context, insert bool, related *Listing) error {
	return o.SetListing(ctx, boil.GetContextDB(), insert, related)
}

// SetListing of the listingsurl to the related item.
// Sets o.R.Listing to related.
// Adds o to related.R.Listingsurls.
func (o *Listingsurl) SetListing(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Listing) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"listingsurls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"listing_id"}),
		strmangle.WhereClause("\"", "\"", 2, listingsurlPrimaryKeyColumns),
	)
	values := []interface{}{related.ListingID, o.ResourseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ListingID, related.ListingID)
	if o.R == nil {
		o.R = &listingsurlR{
			Listing: related,
		}
	} else {
		o.R.Listing = related
	}

	if related.R == nil {
		related.R = &listingR{
			Listingsurls: ListingsurlSlice{o},
		}
	} else {
		related.R.Listingsurls = append(related.R.Listingsurls, o)
	}

	return nil
}

// RemoveListingG relationship.
// Sets o.R.Listing to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Listingsurl) RemoveListingG(ctx context.Context, related *Listing) error {
	return o.RemoveListing(ctx, boil.GetContextDB(), related)
}

// RemoveListing relationship.
// Sets o.R.Listing to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Listingsurl) RemoveListing(ctx context.Context, exec boil.ContextExecutor, related *Listing) error {
	var err error

	queries.SetScanner(&o.ListingID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("listing_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Listing = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Listingsurls {
		if queries.Equal(o.ListingID, ri.ListingID) {
			continue
		}

		ln := len(related.R.Listingsurls)
		if ln > 1 && i < ln-1 {
			related.R.Listingsurls[i] = related.R.Listingsurls[ln-1]
		}
		related.R.Listingsurls = related.R.Listingsurls[:ln-1]
		break
	}
	return nil
}

// Listingsurls retrieves all the records using an executor.
func Listingsurls(mods ...qm.QueryMod) listingsurlQuery {
	mods = append(mods, qm.From("\"listingsurls\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"listingsurls\".*"})
	}

	return listingsurlQuery{q}
}

// FindListingsurlG retrieves a single record by ID.
func FindListingsurlG(ctx context.Context, resourseID string, selectCols ...string) (*Listingsurl, error) {
	return FindListingsurl(ctx, boil.GetContextDB(), resourseID, selectCols...)
}

// FindListingsurl retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindListingsurl(ctx context.Context, exec boil.ContextExecutor, resourseID string, selectCols ...string) (*Listingsurl, error) {
	listingsurlObj := &Listingsurl{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"listingsurls\" where \"resourse_id\"=$1", sel,
	)

	q := queries.Raw(query, resourseID)

	err := q.Bind(ctx, exec, listingsurlObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from listingsurls")
	}

	if err = listingsurlObj.doAfterSelectHooks(ctx, exec); err != nil {
		return listingsurlObj, err
	}

	return listingsurlObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Listingsurl) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Listingsurl) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no listingsurls provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listingsurlColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	listingsurlInsertCacheMut.RLock()
	cache, cached := listingsurlInsertCache[key]
	listingsurlInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			listingsurlAllColumns,
			listingsurlColumnsWithDefault,
			listingsurlColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(listingsurlType, listingsurlMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(listingsurlType, listingsurlMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"listingsurls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"listingsurls\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into listingsurls")
	}

	if !cached {
		listingsurlInsertCacheMut.Lock()
		listingsurlInsertCache[key] = cache
		listingsurlInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Listingsurl record using the global executor.
// See Update for more documentation.
func (o *Listingsurl) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Listingsurl.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Listingsurl) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	listingsurlUpdateCacheMut.RLock()
	cache, cached := listingsurlUpdateCache[key]
	listingsurlUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			listingsurlAllColumns,
			listingsurlPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update listingsurls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"listingsurls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, listingsurlPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(listingsurlType, listingsurlMapping, append(wl, listingsurlPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update listingsurls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for listingsurls")
	}

	if !cached {
		listingsurlUpdateCacheMut.Lock()
		listingsurlUpdateCache[key] = cache
		listingsurlUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q listingsurlQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q listingsurlQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for listingsurls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for listingsurls")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ListingsurlSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ListingsurlSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingsurlPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"listingsurls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, listingsurlPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in listingsurl slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all listingsurl")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Listingsurl) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Listingsurl) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no listingsurls provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listingsurlColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	listingsurlUpsertCacheMut.RLock()
	cache, cached := listingsurlUpsertCache[key]
	listingsurlUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			listingsurlAllColumns,
			listingsurlColumnsWithDefault,
			listingsurlColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			listingsurlAllColumns,
			listingsurlPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert listingsurls, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(listingsurlPrimaryKeyColumns))
			copy(conflict, listingsurlPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"listingsurls\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(listingsurlType, listingsurlMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(listingsurlType, listingsurlMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert listingsurls")
	}

	if !cached {
		listingsurlUpsertCacheMut.Lock()
		listingsurlUpsertCache[key] = cache
		listingsurlUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Listingsurl record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Listingsurl) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Listingsurl record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Listingsurl) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Listingsurl provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), listingsurlPrimaryKeyMapping)
	sql := "DELETE FROM \"listingsurls\" WHERE \"resourse_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from listingsurls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for listingsurls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q listingsurlQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q listingsurlQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no listingsurlQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from listingsurls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for listingsurls")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ListingsurlSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ListingsurlSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(listingsurlBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingsurlPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"listingsurls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listingsurlPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from listingsurl slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for listingsurls")
	}

	if len(listingsurlAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Listingsurl) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Listingsurl provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Listingsurl) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindListingsurl(ctx, exec, o.ResourseID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListingsurlSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty ListingsurlSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListingsurlSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ListingsurlSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listingsurlPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"listingsurls\".* FROM \"listingsurls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listingsurlPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ListingsurlSlice")
	}

	*o = slice

	return nil
}

// ListingsurlExistsG checks if the Listingsurl row exists.
func ListingsurlExistsG(ctx context.Context, resourseID string) (bool, error) {
	return ListingsurlExists(ctx, boil.GetContextDB(), resourseID)
}

// ListingsurlExists checks if the Listingsurl row exists.
func ListingsurlExists(ctx context.Context, exec boil.ContextExecutor, resourseID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"listingsurls\" where \"resourse_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, resourseID)
	}
	row := exec.QueryRowContext(ctx, sql, resourseID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if listingsurls exists")
	}

	return exists, nil
}

// Exists checks if the Listingsurl row exists.
func (o *Listingsurl) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ListingsurlExists(ctx, exec, o.ResourseID)
}
