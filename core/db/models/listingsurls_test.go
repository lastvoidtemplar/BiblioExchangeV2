// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testListingsurls(t *testing.T) {
	t.Parallel()

	query := Listingsurls()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testListingsurlsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListingsurlsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Listingsurls().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListingsurlsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ListingsurlSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListingsurlsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ListingsurlExists(ctx, tx, o.ResourseID)
	if err != nil {
		t.Errorf("Unable to check if Listingsurl exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ListingsurlExists to return true, but got false.")
	}
}

func testListingsurlsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	listingsurlFound, err := FindListingsurl(ctx, tx, o.ResourseID)
	if err != nil {
		t.Error(err)
	}

	if listingsurlFound == nil {
		t.Error("want a record, got nil")
	}
}

func testListingsurlsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Listingsurls().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testListingsurlsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Listingsurls().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testListingsurlsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	listingsurlOne := &Listingsurl{}
	listingsurlTwo := &Listingsurl{}
	if err = randomize.Struct(seed, listingsurlOne, listingsurlDBTypes, false, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}
	if err = randomize.Struct(seed, listingsurlTwo, listingsurlDBTypes, false, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = listingsurlOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = listingsurlTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Listingsurls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testListingsurlsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	listingsurlOne := &Listingsurl{}
	listingsurlTwo := &Listingsurl{}
	if err = randomize.Struct(seed, listingsurlOne, listingsurlDBTypes, false, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}
	if err = randomize.Struct(seed, listingsurlTwo, listingsurlDBTypes, false, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = listingsurlOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = listingsurlTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func listingsurlBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func listingsurlAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Listingsurl) error {
	*o = Listingsurl{}
	return nil
}

func testListingsurlsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Listingsurl{}
	o := &Listingsurl{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, listingsurlDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Listingsurl object: %s", err)
	}

	AddListingsurlHook(boil.BeforeInsertHook, listingsurlBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	listingsurlBeforeInsertHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.AfterInsertHook, listingsurlAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	listingsurlAfterInsertHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.AfterSelectHook, listingsurlAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	listingsurlAfterSelectHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.BeforeUpdateHook, listingsurlBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	listingsurlBeforeUpdateHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.AfterUpdateHook, listingsurlAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	listingsurlAfterUpdateHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.BeforeDeleteHook, listingsurlBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	listingsurlBeforeDeleteHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.AfterDeleteHook, listingsurlAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	listingsurlAfterDeleteHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.BeforeUpsertHook, listingsurlBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	listingsurlBeforeUpsertHooks = []ListingsurlHook{}

	AddListingsurlHook(boil.AfterUpsertHook, listingsurlAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	listingsurlAfterUpsertHooks = []ListingsurlHook{}
}

func testListingsurlsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testListingsurlsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(listingsurlColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testListingsurlToOneListingUsingListing(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Listingsurl
	var foreign Listing

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, listingDBTypes, false, listingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listing struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ListingID, foreign.ListingID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Listing().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ListingID, foreign.ListingID) {
		t.Errorf("want: %v, got %v", foreign.ListingID, check.ListingID)
	}

	ranAfterSelectHook := false
	AddListingHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Listing) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ListingsurlSlice{&local}
	if err = local.L.LoadListing(ctx, tx, false, (*[]*Listingsurl)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Listing == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Listing = nil
	if err = local.L.LoadListing(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Listing == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testListingsurlToOneSetOpListingUsingListing(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Listingsurl
	var b, c Listing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listingsurlDBTypes, false, strmangle.SetComplement(listingsurlPrimaryKeyColumns, listingsurlColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Listing{&b, &c} {
		err = a.SetListing(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Listing != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Listingsurls[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ListingID, x.ListingID) {
			t.Error("foreign key was wrong value", a.ListingID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ListingID))
		reflect.Indirect(reflect.ValueOf(&a.ListingID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ListingID, x.ListingID) {
			t.Error("foreign key was wrong value", a.ListingID, x.ListingID)
		}
	}
}

func testListingsurlToOneRemoveOpListingUsingListing(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Listingsurl
	var b Listing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listingsurlDBTypes, false, strmangle.SetComplement(listingsurlPrimaryKeyColumns, listingsurlColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, listingDBTypes, false, strmangle.SetComplement(listingPrimaryKeyColumns, listingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetListing(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveListing(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Listing().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Listing != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ListingID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Listingsurls) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testListingsurlsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testListingsurlsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ListingsurlSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testListingsurlsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Listingsurls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	listingsurlDBTypes = map[string]string{`ResourseID`: `uuid`, `ListingID`: `uuid`, `ResourseURL`: `character varying`, `UploadStatus`: `boolean`}
	_                  = bytes.MinRead
)

func testListingsurlsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(listingsurlPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(listingsurlAllColumns) == len(listingsurlPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testListingsurlsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(listingsurlAllColumns) == len(listingsurlPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Listingsurl{}
	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, listingsurlDBTypes, true, listingsurlPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(listingsurlAllColumns, listingsurlPrimaryKeyColumns) {
		fields = listingsurlAllColumns
	} else {
		fields = strmangle.SetComplement(
			listingsurlAllColumns,
			listingsurlPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ListingsurlSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testListingsurlsUpsert(t *testing.T) {
	t.Parallel()

	if len(listingsurlAllColumns) == len(listingsurlPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Listingsurl{}
	if err = randomize.Struct(seed, &o, listingsurlDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Listingsurl: %s", err)
	}

	count, err := Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, listingsurlDBTypes, false, listingsurlPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Listingsurl struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Listingsurl: %s", err)
	}

	count, err = Listingsurls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
