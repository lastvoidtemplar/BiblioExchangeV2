// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Uploadfile is an object representing the database table.
type Uploadfile struct {
	ID                 string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Presignedurl       null.String       `boil:"presignedurl" json:"presignedurl,omitempty" toml:"presignedurl" yaml:"presignedurl,omitempty"`
	FileID             null.String       `boil:"file_id" json:"file_id,omitempty" toml:"file_id" yaml:"file_id,omitempty"`
	Allowedfileformats types.StringArray `boil:"allowedfileformats" json:"allowedfileformats,omitempty" toml:"allowedfileformats" yaml:"allowedfileformats,omitempty"`
	Maxsize            null.Int          `boil:"maxsize" json:"maxsize,omitempty" toml:"maxsize" yaml:"maxsize,omitempty"`
	UserID             null.String       `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	DateOfExpration    null.Time         `boil:"date_of_expration" json:"date_of_expration,omitempty" toml:"date_of_expration" yaml:"date_of_expration,omitempty"`
	Callbackadrr       null.String       `boil:"callbackadrr" json:"callbackadrr,omitempty" toml:"callbackadrr" yaml:"callbackadrr,omitempty"`

	R *uploadfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadfileColumns = struct {
	ID                 string
	Presignedurl       string
	FileID             string
	Allowedfileformats string
	Maxsize            string
	UserID             string
	DateOfExpration    string
	Callbackadrr       string
}{
	ID:                 "id",
	Presignedurl:       "presignedurl",
	FileID:             "file_id",
	Allowedfileformats: "allowedfileformats",
	Maxsize:            "maxsize",
	UserID:             "user_id",
	DateOfExpration:    "date_of_expration",
	Callbackadrr:       "callbackadrr",
}

var UploadfileTableColumns = struct {
	ID                 string
	Presignedurl       string
	FileID             string
	Allowedfileformats string
	Maxsize            string
	UserID             string
	DateOfExpration    string
	Callbackadrr       string
}{
	ID:                 "uploadfiles.id",
	Presignedurl:       "uploadfiles.presignedurl",
	FileID:             "uploadfiles.file_id",
	Allowedfileformats: "uploadfiles.allowedfileformats",
	Maxsize:            "uploadfiles.maxsize",
	UserID:             "uploadfiles.user_id",
	DateOfExpration:    "uploadfiles.date_of_expration",
	Callbackadrr:       "uploadfiles.callbackadrr",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var UploadfileWhere = struct {
	ID                 whereHelperstring
	Presignedurl       whereHelpernull_String
	FileID             whereHelpernull_String
	Allowedfileformats whereHelpertypes_StringArray
	Maxsize            whereHelpernull_Int
	UserID             whereHelpernull_String
	DateOfExpration    whereHelpernull_Time
	Callbackadrr       whereHelpernull_String
}{
	ID:                 whereHelperstring{field: "\"uploadfiles\".\"id\""},
	Presignedurl:       whereHelpernull_String{field: "\"uploadfiles\".\"presignedurl\""},
	FileID:             whereHelpernull_String{field: "\"uploadfiles\".\"file_id\""},
	Allowedfileformats: whereHelpertypes_StringArray{field: "\"uploadfiles\".\"allowedfileformats\""},
	Maxsize:            whereHelpernull_Int{field: "\"uploadfiles\".\"maxsize\""},
	UserID:             whereHelpernull_String{field: "\"uploadfiles\".\"user_id\""},
	DateOfExpration:    whereHelpernull_Time{field: "\"uploadfiles\".\"date_of_expration\""},
	Callbackadrr:       whereHelpernull_String{field: "\"uploadfiles\".\"callbackadrr\""},
}

// UploadfileRels is where relationship names are stored.
var UploadfileRels = struct {
}{}

// uploadfileR is where relationships are stored.
type uploadfileR struct {
}

// NewStruct creates a new relationship struct
func (*uploadfileR) NewStruct() *uploadfileR {
	return &uploadfileR{}
}

// uploadfileL is where Load methods for each relationship are stored.
type uploadfileL struct{}

var (
	uploadfileAllColumns            = []string{"id", "presignedurl", "file_id", "allowedfileformats", "maxsize", "user_id", "date_of_expration", "callbackadrr"}
	uploadfileColumnsWithoutDefault = []string{}
	uploadfileColumnsWithDefault    = []string{"id", "presignedurl", "file_id", "allowedfileformats", "maxsize", "user_id", "date_of_expration", "callbackadrr"}
	uploadfilePrimaryKeyColumns     = []string{"id"}
	uploadfileGeneratedColumns      = []string{}
)

type (
	// UploadfileSlice is an alias for a slice of pointers to Uploadfile.
	// This should almost always be used instead of []Uploadfile.
	UploadfileSlice []*Uploadfile
	// UploadfileHook is the signature for custom Uploadfile hook methods
	UploadfileHook func(context.Context, boil.ContextExecutor, *Uploadfile) error

	uploadfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadfileType                 = reflect.TypeOf(&Uploadfile{})
	uploadfileMapping              = queries.MakeStructMapping(uploadfileType)
	uploadfilePrimaryKeyMapping, _ = queries.BindMapping(uploadfileType, uploadfileMapping, uploadfilePrimaryKeyColumns)
	uploadfileInsertCacheMut       sync.RWMutex
	uploadfileInsertCache          = make(map[string]insertCache)
	uploadfileUpdateCacheMut       sync.RWMutex
	uploadfileUpdateCache          = make(map[string]updateCache)
	uploadfileUpsertCacheMut       sync.RWMutex
	uploadfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadfileAfterSelectHooks []UploadfileHook

var uploadfileBeforeInsertHooks []UploadfileHook
var uploadfileAfterInsertHooks []UploadfileHook

var uploadfileBeforeUpdateHooks []UploadfileHook
var uploadfileAfterUpdateHooks []UploadfileHook

var uploadfileBeforeDeleteHooks []UploadfileHook
var uploadfileAfterDeleteHooks []UploadfileHook

var uploadfileBeforeUpsertHooks []UploadfileHook
var uploadfileAfterUpsertHooks []UploadfileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Uploadfile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Uploadfile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Uploadfile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Uploadfile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Uploadfile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Uploadfile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Uploadfile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Uploadfile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Uploadfile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadfileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadfileHook registers your hook function for all future operations.
func AddUploadfileHook(hookPoint boil.HookPoint, uploadfileHook UploadfileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadfileAfterSelectHooks = append(uploadfileAfterSelectHooks, uploadfileHook)
	case boil.BeforeInsertHook:
		uploadfileBeforeInsertHooks = append(uploadfileBeforeInsertHooks, uploadfileHook)
	case boil.AfterInsertHook:
		uploadfileAfterInsertHooks = append(uploadfileAfterInsertHooks, uploadfileHook)
	case boil.BeforeUpdateHook:
		uploadfileBeforeUpdateHooks = append(uploadfileBeforeUpdateHooks, uploadfileHook)
	case boil.AfterUpdateHook:
		uploadfileAfterUpdateHooks = append(uploadfileAfterUpdateHooks, uploadfileHook)
	case boil.BeforeDeleteHook:
		uploadfileBeforeDeleteHooks = append(uploadfileBeforeDeleteHooks, uploadfileHook)
	case boil.AfterDeleteHook:
		uploadfileAfterDeleteHooks = append(uploadfileAfterDeleteHooks, uploadfileHook)
	case boil.BeforeUpsertHook:
		uploadfileBeforeUpsertHooks = append(uploadfileBeforeUpsertHooks, uploadfileHook)
	case boil.AfterUpsertHook:
		uploadfileAfterUpsertHooks = append(uploadfileAfterUpsertHooks, uploadfileHook)
	}
}

// OneG returns a single uploadfile record from the query using the global executor.
func (q uploadfileQuery) OneG(ctx context.Context) (*Uploadfile, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single uploadfile record from the query.
func (q uploadfileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Uploadfile, error) {
	o := &Uploadfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for uploadfiles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Uploadfile records from the query using the global executor.
func (q uploadfileQuery) AllG(ctx context.Context) (UploadfileSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Uploadfile records from the query.
func (q uploadfileQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadfileSlice, error) {
	var o []*Uploadfile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Uploadfile slice")
	}

	if len(uploadfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Uploadfile records in the query using the global executor
func (q uploadfileQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Uploadfile records in the query.
func (q uploadfileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count uploadfiles rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q uploadfileQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q uploadfileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if uploadfiles exists")
	}

	return count > 0, nil
}

// Uploadfiles retrieves all the records using an executor.
func Uploadfiles(mods ...qm.QueryMod) uploadfileQuery {
	mods = append(mods, qm.From("\"uploadfiles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"uploadfiles\".*"})
	}

	return uploadfileQuery{q}
}

// FindUploadfileG retrieves a single record by ID.
func FindUploadfileG(ctx context.Context, iD string, selectCols ...string) (*Uploadfile, error) {
	return FindUploadfile(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUploadfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadfile(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Uploadfile, error) {
	uploadfileObj := &Uploadfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"uploadfiles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uploadfileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from uploadfiles")
	}

	if err = uploadfileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadfileObj, err
	}

	return uploadfileObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Uploadfile) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Uploadfile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no uploadfiles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadfileInsertCacheMut.RLock()
	cache, cached := uploadfileInsertCache[key]
	uploadfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadfileAllColumns,
			uploadfileColumnsWithDefault,
			uploadfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadfileType, uploadfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadfileType, uploadfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"uploadfiles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"uploadfiles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into uploadfiles")
	}

	if !cached {
		uploadfileInsertCacheMut.Lock()
		uploadfileInsertCache[key] = cache
		uploadfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Uploadfile record using the global executor.
// See Update for more documentation.
func (o *Uploadfile) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Uploadfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Uploadfile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadfileUpdateCacheMut.RLock()
	cache, cached := uploadfileUpdateCache[key]
	uploadfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadfileAllColumns,
			uploadfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update uploadfiles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"uploadfiles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadfileType, uploadfileMapping, append(wl, uploadfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update uploadfiles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for uploadfiles")
	}

	if !cached {
		uploadfileUpdateCacheMut.Lock()
		uploadfileUpdateCache[key] = cache
		uploadfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q uploadfileQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadfileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for uploadfiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for uploadfiles")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UploadfileSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"uploadfiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadfilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in uploadfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all uploadfile")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Uploadfile) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Uploadfile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no uploadfiles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadfileUpsertCacheMut.RLock()
	cache, cached := uploadfileUpsertCache[key]
	uploadfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uploadfileAllColumns,
			uploadfileColumnsWithDefault,
			uploadfileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadfileAllColumns,
			uploadfilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert uploadfiles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(uploadfilePrimaryKeyColumns))
			copy(conflict, uploadfilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"uploadfiles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(uploadfileType, uploadfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadfileType, uploadfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert uploadfiles")
	}

	if !cached {
		uploadfileUpsertCacheMut.Lock()
		uploadfileUpsertCache[key] = cache
		uploadfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Uploadfile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Uploadfile) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Uploadfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Uploadfile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Uploadfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadfilePrimaryKeyMapping)
	sql := "DELETE FROM \"uploadfiles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from uploadfiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for uploadfiles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q uploadfileQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q uploadfileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no uploadfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from uploadfiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for uploadfiles")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UploadfileSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"uploadfiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadfilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from uploadfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for uploadfiles")
	}

	if len(uploadfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Uploadfile) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Uploadfile provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Uploadfile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUploadfile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadfileSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty UploadfileSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"uploadfiles\".* FROM \"uploadfiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in UploadfileSlice")
	}

	*o = slice

	return nil
}

// UploadfileExistsG checks if the Uploadfile row exists.
func UploadfileExistsG(ctx context.Context, iD string) (bool, error) {
	return UploadfileExists(ctx, boil.GetContextDB(), iD)
}

// UploadfileExists checks if the Uploadfile row exists.
func UploadfileExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"uploadfiles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if uploadfiles exists")
	}

	return exists, nil
}

// Exists checks if the Uploadfile row exists.
func (o *Uploadfile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadfileExists(ctx, exec, o.ID)
}
