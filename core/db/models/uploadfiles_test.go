// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUploadfiles(t *testing.T) {
	t.Parallel()

	query := Uploadfiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUploadfilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadfilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Uploadfiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadfilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadfileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadfilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UploadfileExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Uploadfile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UploadfileExists to return true, but got false.")
	}
}

func testUploadfilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	uploadfileFound, err := FindUploadfile(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if uploadfileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUploadfilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Uploadfiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUploadfilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Uploadfiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUploadfilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	uploadfileOne := &Uploadfile{}
	uploadfileTwo := &Uploadfile{}
	if err = randomize.Struct(seed, uploadfileOne, uploadfileDBTypes, false, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadfileTwo, uploadfileDBTypes, false, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uploadfileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadfileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Uploadfiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUploadfilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	uploadfileOne := &Uploadfile{}
	uploadfileTwo := &Uploadfile{}
	if err = randomize.Struct(seed, uploadfileOne, uploadfileDBTypes, false, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadfileTwo, uploadfileDBTypes, false, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uploadfileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadfileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func uploadfileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func uploadfileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Uploadfile) error {
	*o = Uploadfile{}
	return nil
}

func testUploadfilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Uploadfile{}
	o := &Uploadfile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, uploadfileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Uploadfile object: %s", err)
	}

	AddUploadfileHook(boil.BeforeInsertHook, uploadfileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	uploadfileBeforeInsertHooks = []UploadfileHook{}

	AddUploadfileHook(boil.AfterInsertHook, uploadfileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	uploadfileAfterInsertHooks = []UploadfileHook{}

	AddUploadfileHook(boil.AfterSelectHook, uploadfileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	uploadfileAfterSelectHooks = []UploadfileHook{}

	AddUploadfileHook(boil.BeforeUpdateHook, uploadfileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	uploadfileBeforeUpdateHooks = []UploadfileHook{}

	AddUploadfileHook(boil.AfterUpdateHook, uploadfileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	uploadfileAfterUpdateHooks = []UploadfileHook{}

	AddUploadfileHook(boil.BeforeDeleteHook, uploadfileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	uploadfileBeforeDeleteHooks = []UploadfileHook{}

	AddUploadfileHook(boil.AfterDeleteHook, uploadfileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	uploadfileAfterDeleteHooks = []UploadfileHook{}

	AddUploadfileHook(boil.BeforeUpsertHook, uploadfileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	uploadfileBeforeUpsertHooks = []UploadfileHook{}

	AddUploadfileHook(boil.AfterUpsertHook, uploadfileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	uploadfileAfterUpsertHooks = []UploadfileHook{}
}

func testUploadfilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadfilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(uploadfileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadfilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUploadfilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadfileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUploadfilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Uploadfiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	uploadfileDBTypes = map[string]string{`ID`: `uuid`, `Presignedurl`: `character varying`, `FileID`: `uuid`, `Allowedfileformats`: `ARRAYcharacter varying`, `Maxsize`: `integer`, `UserID`: `uuid`, `DateOfExpration`: `date`, `Callbackadrr`: `character varying`}
	_                 = bytes.MinRead
)

func testUploadfilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(uploadfilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(uploadfileAllColumns) == len(uploadfilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUploadfilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(uploadfileAllColumns) == len(uploadfilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Uploadfile{}
	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadfileDBTypes, true, uploadfilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(uploadfileAllColumns, uploadfilePrimaryKeyColumns) {
		fields = uploadfileAllColumns
	} else {
		fields = strmangle.SetComplement(
			uploadfileAllColumns,
			uploadfilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UploadfileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUploadfilesUpsert(t *testing.T) {
	t.Parallel()

	if len(uploadfileAllColumns) == len(uploadfilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Uploadfile{}
	if err = randomize.Struct(seed, &o, uploadfileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Uploadfile: %s", err)
	}

	count, err := Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, uploadfileDBTypes, false, uploadfilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Uploadfile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Uploadfile: %s", err)
	}

	count, err = Uploadfiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
