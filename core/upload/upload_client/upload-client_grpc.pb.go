// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: upload-client.proto

package upload_client

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploadClient_OnSuccessfulUpload_FullMethodName   = "/upload_client.UploadClient/OnSuccessfulUpload"
	UploadClient_OnErrorWhenUploading_FullMethodName = "/upload_client.UploadClient/OnErrorWhenUploading"
	UploadClient_OnUrlExpiration_FullMethodName      = "/upload_client.UploadClient/OnUrlExpiration"
)

// UploadClientClient is the client API for UploadClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadClientClient interface {
	OnSuccessfulUpload(ctx context.Context, in *CallbackSuccRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	OnErrorWhenUploading(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	OnUrlExpiration(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type uploadClientClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadClientClient(cc grpc.ClientConnInterface) UploadClientClient {
	return &uploadClientClient{cc}
}

func (c *uploadClientClient) OnSuccessfulUpload(ctx context.Context, in *CallbackSuccRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UploadClient_OnSuccessfulUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClientClient) OnErrorWhenUploading(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UploadClient_OnErrorWhenUploading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClientClient) OnUrlExpiration(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UploadClient_OnUrlExpiration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadClientServer is the server API for UploadClient service.
// All implementations must embed UnimplementedUploadClientServer
// for forward compatibility
type UploadClientServer interface {
	OnSuccessfulUpload(context.Context, *CallbackSuccRequest) (*empty.Empty, error)
	OnErrorWhenUploading(context.Context, *CallbackRequest) (*empty.Empty, error)
	OnUrlExpiration(context.Context, *CallbackRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUploadClientServer()
}

// UnimplementedUploadClientServer must be embedded to have forward compatible implementations.
type UnimplementedUploadClientServer struct {
}

func (UnimplementedUploadClientServer) OnSuccessfulUpload(context.Context, *CallbackSuccRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSuccessfulUpload not implemented")
}
func (UnimplementedUploadClientServer) OnErrorWhenUploading(context.Context, *CallbackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnErrorWhenUploading not implemented")
}
func (UnimplementedUploadClientServer) OnUrlExpiration(context.Context, *CallbackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUrlExpiration not implemented")
}
func (UnimplementedUploadClientServer) mustEmbedUnimplementedUploadClientServer() {}

// UnsafeUploadClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadClientServer will
// result in compilation errors.
type UnsafeUploadClientServer interface {
	mustEmbedUnimplementedUploadClientServer()
}

func RegisterUploadClientServer(s grpc.ServiceRegistrar, srv UploadClientServer) {
	s.RegisterService(&UploadClient_ServiceDesc, srv)
}

func _UploadClient_OnSuccessfulUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackSuccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadClientServer).OnSuccessfulUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadClient_OnSuccessfulUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadClientServer).OnSuccessfulUpload(ctx, req.(*CallbackSuccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadClient_OnErrorWhenUploading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadClientServer).OnErrorWhenUploading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadClient_OnErrorWhenUploading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadClientServer).OnErrorWhenUploading(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadClient_OnUrlExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadClientServer).OnUrlExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadClient_OnUrlExpiration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadClientServer).OnUrlExpiration(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadClient_ServiceDesc is the grpc.ServiceDesc for UploadClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upload_client.UploadClient",
	HandlerType: (*UploadClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnSuccessfulUpload",
			Handler:    _UploadClient_OnSuccessfulUpload_Handler,
		},
		{
			MethodName: "OnErrorWhenUploading",
			Handler:    _UploadClient_OnErrorWhenUploading_Handler,
		},
		{
			MethodName: "OnUrlExpiration",
			Handler:    _UploadClient_OnUrlExpiration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload-client.proto",
}
